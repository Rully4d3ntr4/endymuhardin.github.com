<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Living life and make it better]]></title>
  <link href="http://endymuhardin.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://endymuhardin.github.com/"/>
  <updated>2012-08-09T09:28:33+07:00</updated>
  <id>http://endymuhardin.github.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial ExtJS]]></title>
    <link href="http://endymuhardin.github.com/blog/Java/PHP/tutorial-extjs/"/>
    <updated>2011-06-21T20:15:31+07:00</updated>
    <id>http://endymuhardin.github.com/blog/Java/PHP/tutorial-extjs</id>
    <content type="html"><![CDATA[<p>Hari Senin kemarin, ArtiVisi mengadakan internal training mengenai ExtJS yang diikuti oleh programmer ArtiVisi dan sister company. Berikut adalah materi trainingnya.</p>

<h2>Cara setup project ExtJS</h2>

<p><video width='640' height='320' preload='none' controls poster=' http://artivisi.com/~endy/videos/training-extjs/01.%20Setup%20ExtJS.png'><source src='http://artivisi.com/~endy/videos/training-extjs/01.%20Setup%20ExtJS.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h2>Memahami Layout</h2>

<p><video width='640' height='320' preload='none' controls poster=' http://artivisi.com/~endy/videos/training-extjs/02.%20ExtJS%20Layout.png'><source src='http://artivisi.com/~endy/videos/training-extjs/02.%20ExtJS%20Layout.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h2>Membuat Menubar</h2>

<p><video width='640' height='320' preload='none' controls poster=' http://artivisi.com/~endy/videos/training-extjs/03.%20Klik%20Menu%20muncul%20Tab.png'><source src='http://artivisi.com/~endy/videos/training-extjs/03.%20Klik%20Menu%20muncul%20Tab.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h2>Membuat User Management Screen</h2>

<p><video width='640' height='320' preload='none' controls poster=' http://artivisi.com/~endy/videos/training-extjs/04.%20Membuat%20User%20Management%20Screen.png'><source src='http://artivisi.com/~endy/videos/training-extjs/04.%20Membuat%20User%20Management%20Screen.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h2>Membuat Toolbar CRUD</h2>

<p><video width='640' height='320' preload='none' controls poster=' http://artivisi.com/~endy/videos/training-extjs/05.%20Membuat%20Toolbar%20CRUD.png'><source src='http://artivisi.com/~endy/videos/training-extjs/05.%20Membuat%20Toolbar%20CRUD.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<p>Masih ada beberapa materi lanjutan yang belum sempat disampaikan, yaitu:</p>

<ul>
<li><p>Enable/Disable Form</p></li>
<li><p>Save isi form ke server</p></li>
<li><p>Query data dari server, tampilkan ke grid</p></li>
</ul>


<p>Kode program yang digunakan pada training ini dapat diikuti di <a href="https://github.com/endymuhardin/belajar-extjs">Github page saya</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Transaction]]></title>
    <link href="http://endymuhardin.github.com/blog/Java/PHP/database-transaction/"/>
    <updated>2011-02-14T04:14:22+07:00</updated>
    <id>http://endymuhardin.github.com/blog/Java/PHP/database-transaction</id>
    <content type="html"><![CDATA[<p>Artikel ini saya tulis berdasarkan diskusi tentang transaction di milis id-mysql. Awalnya sederhana, ada yang tanya begini,</p>

<blockquote></blockquote>

<p>halo rekan2 dba &amp; developer</p>

<p>mysql-innodb kan punya fasilitas transaction yang seperti oracle/postgres tuh.
mau nanya, dalam implementasi real di aplikasi,
contoh bussiness process/use case apa aja yang menggunakan transaction?
kemudian contoh kasus rollbacknya gimana?</p>

<p>Tadinya saya kurang semangat menjawab, karena asumsi saya, ini pertanyaan mendasar, dan pastilah banyak yang bisa menjawab secara benar dan tidak menyesatkan. Tapi apa lacur, saya membaca pertanyaan lanjutan seperti ini.</p>

<blockquote><p>Ada yang pernah punya pengalaman pake software accounting tanpa feature
transaction?</p></blockquote>

<p>Dan jawabannya ternyata sangat mengerikan.</p>

<blockquote><p>yup, pernah.. 3 aplikasi sudah berjalan berbeda2 kasus accounting nya..
dan tidak menggunakan feature transaction...
skrng sedang garap accounting lainnya untuk perusahan dagang, dan
sudah direncakan tanpa feature transaction.</p></blockquote>

<p>yg aplikasi 1 dr taun 2002, aplikasi 2 dr taun 2004, aplikasi 3 dr jan 2010.
oya, ada jg aplikasi lain di sekitar taun 2005-2009, beberapa masih
dipakai, beberapa tdk dipakai karena masalah internal mereka.
dan selama ini aplikasi yg telah dipakai masih ok2 saja pak.</p>

<p>menurut singkat saya, jika peng-handle php nya sudah cukup
menanggulangi masalah transaksi data, tidak harus menggunakan feature
transaction pada database nya.
karena pd umumnya yg sudah berjalan, kebutuhan inti ada pada
pencarian, input, edit, delete dengan kecepatan yg tinggi dan diakses
oleh beberapa user, dan juga optimize database, dengan begitu menurut
hemat saya, saya lebih condong menggunakan MyIsam yg tdk menggunakan
feature transaction yg sedikit memberatkan proses data.</p>

<p>oya, untuk case mengharuskan memakai feature transaction itu misalnya
pada kasus:
- jika pada aplikasi tidak meng-handle apabila ada data transaksi yg
dihapus/update/input yg mengharuskan ada link data yg juga ikut
terupdate/terhapus/terinput</p>

<p>untuk yg sudah menggunakan feature transaction, silahkan saya juga
menunggu tanggapan dan pengalamannya.</p>

<p>What the @#$!
Ini kalo meminjam istilah MUI, harus dibimbing untuk kembali ke jalan yang benar, tapi tidak boleh anarkis :D</p>

<p>Salah satu poin penting dalam database transaction adalah atomic, yaitu beberapa perintah dianggap sebagai satu kesatuan.
Kalau satu gagal, yang lain harus dibatalkan.</p>

<p>Ini adalah fundamental dari pemrograman dengan menggunakan database relasional.</p>

<p>Pada kasus apa perlu transaction?
Ya pada semua kasus yang perlu atomic.
Contohnya : header detail. Sekali insert, 1 header dan beberapa detail.
Kalo pada waktu insert detail gagal, ya headernya harus diundo, kalo ngga ada header yang gantung tanpa detail sehingga datanya juga jadi salah.</p>

<p>Sekarang balik saya tanya, aplikasi apa yang gak pake skema header detail?
Kecuali aplikasi prakarya tugas sekolah, aplikasi bisnis <strong>pasti</strong> pake header detail.</p>

<p>Itu masalah atomicity. Kemudian ada masalah isolation.
Isolation ini artinya, transaction yang belum dicommit, tidak akan bisa dibaca oleh session lain.
Contohnya gini, kita terima order 1000 item.
Tentunya butuh waktu untuk menginsert 1000 record, misalnya butuh waktu 2 detik.
Di dunia prosesor, 2 detik itu lama sekali, dan banyak hal bisa terjadi dalam rentang waktu tersebut.
Nah, akan terjadi musibah, kalo kita ternyata ada fitur untuk menghitung jumlah order, katakan saja querynya seperti ini.</p>

<pre><code>select sum(nilai) from t_order where tanggal = '2011-02-02'
</code></pre>

<p>yang berjalan di tengah-tengah proses insert tadi, misalnya pada waktu baru terinsert 53 order saja. Query hitung ini dijalankan oleh user lain. Suatu hal yang sangat umum terjadi, aplikasi diakses beberapa user berbarengan.</p>

<p>Query ini akan menghasilkan nilai yang salah, karena 1000 order itu belum tentu sukses diinsert.
Misalnya pada record ke 143 terjadi mati lampu, hardisk penuh, komputer hang, browser ketutup, laptop kesiram kopi, usernya menekan tombol cancel, validasi stok produk tidak cukup, atau whatever kejadian remeh-temeh yang umum terjadi dalam kehidupan sehari-hari, tentu akan terjadi kekacauan.
Karena tidak atomic, maka kita tidak tau sudah berapa record yang terinsert, sehingga menyulitkan proses recovery. Order mana yang harus diinsert ulang, dan order mana yang sudah masuk?
Karena tidak ada isolation, maka user yang menjalankan perhitungan order akan mendapat hasil yang tidak sahih kebenarannya.</p>

<p>Seandainya saja kita menggunakan transaction dengan benar, maka pada waktu terjadi sesuatu pada waktu proses insert tadi, maka posisi database akan dikembalikan ke posisi sebelum insert dilakukan. Karena posisi sebelum insert kita tahu dengan pasti, maka recovery gampang.
Insert ulang saja 1000 order tadi tanpa kecuali. Sederhana dan mudah.</p>

<p>Jadi kalo ada di sini yang bilang bikin aplikasi bisnis tanpa transaction, maka itu adalah nonsense.
Tidak peduli kalo sampe saat ini jalan lancar, maka itu hanyalah kebetulan belaka, dan kita tidak mau selamanya mengandalkan keberuntungan kan?
Kalau sampai saat ini berjalan lancar, ya mungkin aplikasinya cuma dipakai 1 concurrent user saja dan itupun jarang-jarang pake.</p>

<p>Nah, jadi transaction itu adalah fitur fundamental yang harus digunakan, sama seperti kalo kita keluar rumah ya harus pake celana.
Di daerah lain sana orang kemana2 cuma pake koteka, dan saya tidak mau berdebat dengan mereka urusan celana.
Jadi kalo masih ada yang bersikukuh bikin aplikasi bisnis gak pake transaction, ya silahkan, saya tidak mau berdebat urusan ini.
Percuma berdebat sama orang yang gak pake celana ;p</p>

<p>Selanjutnya, sebetulnya apa benar transaction itu memberatkan aplikasi?
Hmm ... ini sebetulnya hanyalah mitos belaka.
Yang mau mendebat silahkan sajikan benchmark antara non-transactional dan transactional.
Kalo selisih performance cuma 100%, artinya kalo non-transactional cuma 2 kali lebih lemot, saya mendingan upgrade hardware daripada mengorbankan data integrity untuk gain performance yang tidak seberapa ini.</p>

<p>Jadi, apa kita tidak boleh pakai MyISAM ?
Tentu ada waktu dan tempatnya.
Data2 read only seperti misalnya tabel kategori, master produk, bolehlah pake MyISAM.
Tapi kalo sudah data header detail, ya harus InnoDB dan harus menggunakan transaction supaya atomic.</p>

<p>Setelah kita menggunakan InnoDB, sebetulnya kita tidak bisa non-transactional.
Kalo kita tidak begin dan commit secara explisit, sebenarnya untuk tiap SQL statement, itu dianggap satu transaction.
Sehingga SQL seperti ini :</p>

<pre><code>update table harga set nilai = nilai + 1000;
</code></pre>

<p>Sebetulnya akan dijalankan seperti ini ;</p>

<pre><code>begin;
update table harga set nilai = nilai + 1000;
commit;
</code></pre>

<p>Ini namanya fitur autocommit. Di MySQL defaultnya dienable.</p>

<p>Dengan adanya autocommit ini, justru kita akan lebih lemot kalo tidak menggunakan transaction secara benar.
Contoh, insert 100 data produk.
Kalo tanpa begin dan commit explisit, berarti ada 100 begin dan ada 100 commit, artinya 100 kali menjalankan transaction.
Akan lebih efisien kalo kita lakukan explisit, seperti ini :</p>

<pre><code>begin; 
insert into table produk (kode) values ('P-001');
... ulangi 99 kali lagi ..
commit; 
</code></pre>

<p>Cara di atas hanya akan membutuhkan satu transaction saja.
Jauh lebih efisien.</p>

<p>Baiklah, ada beberapa pesan moral di artikel ini</p>

<ol>
<li><p>Header detail harus dioperasikan secara atomic</p></li>
<li><p>Operasi yang belum selesai, tidak boleh dilihat session lain, sehingga untuk aplikasi multiuser, pasti butuh isolation</p></li>
<li><p>Karena aplikasi bisnis umumnya multiuser, dan pasti punya skema header-detail, maka <strong>pasti harus</strong>menggunakan transaction</p></li>
<li><p>Masalah performance di transaction umumnya mitos belaka, dan walaupun ada, tidak sebanding dengan mengabaikan integritas data</p></li>
<li><p>Jangan lupa pakai celana kalau keluar rumah</p></li>
</ol>


<p>Pembaca setia blog saya tentu paham bahwa biasanya saya memberikan anjuran dengan kata-kata sebaiknya, tergantung situasi, dan istilah-istilah yang relatif. Tapi di artikel ini, banyak kata-kata pasti, harus, dan sejenisnya. Ini karena masalah transaction ini berkaitan dengan integritas data. Aplikasi yang kita buat haruslah bisa dipercaya untuk menghasilkan perhitungan yang benar. Tanpa menjaga integritas data dengan transaction, mustahil perhitungan yang benar bisa didapatkan.</p>

<p>Lebih lanjut tentang masalah-masalah yang bisa terjadi, bisa lihat <a href="http://en.wikipedia.org/wiki/Database_transaction">di Wikipedia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuning Performance]]></title>
    <link href="http://endymuhardin.github.com/blog/Java/PHP/tuning-performance/"/>
    <updated>2010-05-05T15:24:18+07:00</updated>
    <id>http://endymuhardin.github.com/blog/Java/PHP/tuning-performance</id>
    <content type="html"><![CDATA[<p>Setelah aplikasi dicoding dengan benar, biasanya langkah berikutnya adalah tuning performance. Hal ini banyak ditanyakan di berbagai milis pemrograman yang saya ikuti. Agar tidak berkali-kali menulis jawaban yang sama, berikut artikel tentang metodologi saya dalam melakukan tuning performance aplikasi.</p>

<h2>0. Miliki tujuan yang jelas</h2>

<p>Misalnya :
Mampu menghandle 100 request/detik dengan response time &lt; 2 detik
dengan 1 juta record di database. Bisa jadi pada tahap ini, ternyata keputusannya adalah tidak perlu tuning, karena performance aplikasi yang sekarang sudah memenuhi keinginan.</p>

<h2>1. Pastikan aplikasinya berjalan benar</h2>

<p>Make it right, then make it fast.
Gak ada gunanya mentuning aplikasi buggy.
Kita juga harus punya perangkat pengetes yang lengkap.
Supaya nanti setelah tuning, bisa dipastikan bahwa tuningnya tidak menimbulkan bug baru.</p>

<h2>2. Pasang monitor di aplikasi</h2>

<p>Misalnya :
- CPU usage
- Memory usage
- Aktifitas harddisk
- Aktifitas database</p>

<p>Di linux, CPU dan Memory usage bisa <a href="http://www.linuxforums.org/articles/using-top-more-efficiently_89.html">dipantau dengan top</a>,
sedangkan aktifitas harddisk dengan <a href="http://royontechnology.blogspot.com/2007/06/using-iostat-for-monitoring-disk.html">iostat</a>.
Di MySQL, aktifitas database bisa dimonitor dengan perintah <a href="http://dev.mysql.com/doc/refman/5.1/en/show-processlist.html">show processlist</a>.</p>

<h2>3. Setelah monitor siap, penyiksaan dimulai</h2>

<p>Berikan load yang tinggi ke aplikasi dengan menggunakan tools penyiksaan seperti misalnya <a href="http://jakarta.apache.org/jmeter/">JMeter</a>.
Tingkatkan terus loadnya sampai response time tidak lagi memenuhi syarat.
Misalnya, pada 30 request/detik, response time menjadi 10 detik.</p>

<h2>4. Cari bottlenecknya</h2>

<p>Amati monitor, aspek mana yang overload.
Apakah CPU, I/O, atau memori.
Perhatikan juga aktifitas database untuk mencari penyebabnya.</p>

<h2>5. Lakukan tuning</h2>

<p>Silahkan dioprek dengan metode trial and error.
Biasanya pada tahap ini saya mencari kolom mana yang perlu diindex,
bagian mana di source code yang perlu diperbaiki,
atau konfigurasi seperti apa yang optimal.</p>

<h2>6. Test lagi</h2>

<p>Setelah dioprek, jalankan lagi tools penyiksaan.
Kalau langkah no #5 benar, biasanya bottlenecknya akan pindah.
Misalnya, tadinya CPU maxed out 100%, setelah tuning jadi santai 10%,
tapi memory usage jadi 80%.</p>

<h2>7. Ulangi langkah #5 dan #6</h2>

<p>Ulangi terus tuning dan test sampai aplikasi memenuhi tujuan yang diset di langkah #0.
Inilah pentingnya langkah #0, supaya kita tahu kapan harus berhenti.</p>

<p>Beberapa hal yang harus diingat dalam tuning performance:</p>

<ol>
<li><p>Tidak ada pil ajaib, masing-masing kasus berbeda. Kadang masalahnya ada di index database, kadang di prosesor, dsb.</p></li>
<li><p>Jangan main tebak-tebakan, semua keputusan harus berdasarkan hasil monitoring. Soalnya seringkali tebakan kita salah.</p></li>
<li><p>Jangan lupakan maintenance source code. Proses tuning mungkin saja akan membuat source code menjadi kompleks dan sulit dibaca. Jangan sampai kita mengorbankan kerapian coding demi sedikit peningkatan performance. Lebih baik upgrade hardware daripada mengotori source code.</p></li>
<li><p>Tahu kapan harus berhenti. Tuning merupakan pekerjaan yang menarik, mirip seperti bermain game. Oleh karena itu penting bagi kita untuk punya tujuan. Begitu tujuan dicapai, segera berhenti. Lebih baik menambah fitur yang memiliki business value daripada terus menerus berkutat dengan performance.</p></li>
</ol>


<p>Demikian sekilas tentang tuning. Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kandidat Java vs PHP]]></title>
    <link href="http://endymuhardin.github.com/blog/Java/Life/PHP/kandidat-java-vs-php/"/>
    <updated>2008-02-07T00:04:44+07:00</updated>
    <id>http://endymuhardin.github.com/blog/Java/Life/PHP/kandidat-java-vs-php</id>
    <content type="html"><![CDATA[<p>Disclaimer : kondisi dan pengalaman Anda SANGAT MUNGKIN BERBEDA.
Jadi jangan bilang saya salah ... ini pengalaman pribadi.
Pengalaman Anda boleh saja berbeda, dan sangat dianjurkan untuk sharing.</p>

<blockquote><p>Belakangan ini banyak yang nyari Programmer PHP yah :-d</p></blockquote>

<p>Demikian tanggapan moderator milis JUG-Indonesia.</p>

<p>Saya mau sharing pengalaman sedikit tentang rekrutasi ArtiVisi beberapa hari yang lalu.
Rate salary di lowongan kemarin itu 2-3 juta rupiah, looking for PHP Programmer.</p>

<p>Ternyata, dengan rate salary segitu, para kandidat sudah mampu 'melaju ke babak playoff'.
Begini maksudnya.</p>

<p>Kalau interview, saya selalu mengajukan pertanyaan yang makin lama makin sulit.
Job seeker, perhatikan ini, Endy's interview style.</p>

<ol>
<li>Urusan coding standar. Percabangan dan perulangan.
Misalnya:</li>
<li>tampilkan nama anda sebanyak jumlah hurufnya
kalau namanya Endy, tampilkan
endy endy endy endy
kalau namanya Dhiku, tampilkan
dhiku dhiku dhiku dhiku dhiku</li>
<li><p>dengan input bulan dan tahun, buat function/method untuk menghitung jumlah harinya</p></li>
<li><p>Lalu topik-topik populer</p></li>
<li>HTML syntax</li>
<li>Tableless layout with CSS</li>
<li>SQL Injection   3. Setelah itu masalah yang membutuhkan imajinasi, misalnya perbedaan pass by value dan pass by reference   4. Kalau masih lolos juga, matakuliah CS yang biasanya bikin ngantuk</li>
<li>Struktur Data</li>
<li>Algoritma tingkat menengah (tree, sorting, dsb)</li>
<li>Automata / Finite State Machine   5. Baru kemudian pertanyaan tentang wawasan</li>
<li>Primary Operating System, dan Secondary OS, yang biasa digunakan
Cuma pernah pakai Windows??? Hmm ... terima kasih atas waktunya, nanti akan saya hubungi lagi.
Tidak pernah pakai OS selain FreeBSD?? Hmm ... menarik juga ... mari kita tanya lebih lanjut, "Kamu sekolah TK di mana?"Saya pernah posting tentang kandidat ideal menurut saya <a href="http://endy.artivisi.com/blog/life/pengetahuan-wajib-buat-programmer/">di sini</a>.</li>
</ol>


<p>Lalu banyak yang berkomentar tentang betapa sulitnya persyaratan tersebut.</p>

<p>Nah ...kembali ke pertanyaan Joshua ... kenapa sekarang banyak cari PHP Programmer?</p>

<p>Well ... berdasarkan pengalaman saya, dengan tawaran 2-3 juta,
para kandidat programmer PHP ini umumnya mampu sampai pertanyaan 3.
Beberapa ada yang bisa jawab sampai nomer 4.
Belum ada yang sampai 5.</p>

<p>Bagaimana dengan koleganya, kandidat programmer Java?
Menyedihkan ....
Bahkan no 2 pun banyak yang gak bisa jawab.
Fresh graduate Java programmer, berdasarkan survei yang tidak serius dan tidak bisa dipertanggungjawabkan metodologinya, apalagi hasilnya, menyatakan bahwa mereka mengharapkan gaji setidaknya 3-4 juta.</p>

<p>Jadi ... kalau saya punya budget 3-4 juta, lalu buka lowongan, bandingkan apa yang akan saya peroleh.</p>

<p><em>PHP Programmer</em></p>

<ul>
<li>Berpengalaman 2-3 tahun, sudah tahu sopan santun kerja di kantor</li>
<li>Bisa HTML</li>
<li>Bisa CSS, lengkap dengan div, span, bisa bikin table-less layout</li>
<li>Bisa AJAX, low level lagi pakai prototype.js atau whatever library JavaScript yang sedang trend</li>
<li>Ngerti konsep HTTP request-response, session, cookie, upload file, dan urusan remeh-temeh HTTP lainnya</li>
<li>Kalau beruntung, mungkin bisa dapat yang ngerti SOAP segala</li>
<li>Hey, 4 juta cukup mahal ... coba kita lihat mungkin dia ngerti Photoshop juga :D</li>
</ul>


<p><em>Java Programmer</em>  * Fresh graduate, masih bergaya mahasiswa
* Ngerti HTML seadanya, belum tentu ngerti perilakunya frameset
* Gak bisa CSS, apalagi table-less layout
* Forget about AJAX
* Forget about low-level HTTP, servlet mapping di web.xml aja belum tentu ngerti
* SOAP?? Buat mandi??
* Photoshop atau Corel Draw .. hmm .. itu kan kerjaannya Web Designer. Saya gak ikut-ikut.</p>

<p>Nah .... lalu apa pesan moral dari artikel ini?</p>

<ol>
<li>Freshmen Java harus lebih tahu diri. Kerjakan PR dulu baru apply. Dengan kondisi seperti di atas, saya lebih suka mempekerjakan PHP programmer lalu diajari Java</li>
<li>Industri PHP harus lebih mengapresiasi komunitasnya</li>
<li>Sebagai company-owner, harus tahu kondisi di berbagai dunia</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat aggregator dengan MagpieRSS]]></title>
    <link href="http://endymuhardin.github.com/blog/PHP/aggregator-magpierss/"/>
    <updated>2007-02-08T23:54:54+07:00</updated>
    <id>http://endymuhardin.github.com/blog/PHP/aggregator-magpierss</id>
    <content type="html"><![CDATA[<p>Pada artikel ini, kita akan belajar cara menambahkan feed aggregator di website kita. Untuk mudahnya, kita gunakan pustaka <a href="magpierss.sourceforge.net">Magpie RSS</a>. Dengan library ini, kita bisa membuat website yang berisi rangkuman dari website-website lain (web-based aggregator).</p>

<p>Penjelasan tentang apa itu RSS dapat dilihat di <a href="http://endy.artivisi.com/blog/lain/apa-itu-rss/">artikel ini</a>.</p>

<h2>Cara penggunaan Magpie RSS</h2>

<p>Setelah donlod dan extract, copy empat file magpie:</p>

<ul>
<li><p>rss_cache.inc</p></li>
<li><p>rss_fetch.inc</p></li>
<li><p>rss_parse.inc</p></li>
<li><p>rss_utils.inc</p></li>
</ul>


<p>Berikut file dependensinya yang ada di folder extlib.</p>

<p>Selanjutnya, untuk mengolah RSS feed, hanya dibutuhkan tiga baris kode:</p>

<pre><code>&lt;code&gt;
require_once('inc/rss_fetch.inc');
$url = "http://www.php.net/news.rss";
$rss = fetch_rss($url);
&lt;/code&gt;
</code></pre>

<p>Variabel $rss tinggal dilooping dan ditampilkan sesuai keinginan. Sebagai contoh, saya tampilkan isi feed dalam tabel.</p>

<pre><code>&lt;code&gt;
&lt;table border="1"&gt;
    &lt;tr&gt;&lt;th&gt;No&lt;/th&gt;&lt;th&gt;Judul&lt;/th&gt;&lt;th&gt;Ringkasan&lt;/th&gt;&lt;/tr&gt;
    &lt;? $i=0; foreach ($rss-&gt;items as $item) { $i++; ?&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;?=$i ?&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="&lt;? echo($item[link]); ?&gt;"&gt;&lt;? echo($item[title]); ?&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;? echo($item[description]); ?&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;? } ?&gt;
&lt;/table&gt;
&lt;/code&gt;
</code></pre>

<p>Hasilnya dapat dilihat <a href="http://endy.artivisi.com/downloads/code/magpie-rss/magpie.php">di sini</a>. Sedangkan source codenya dapat didownload <a href="http://endy.artivisi.com/downloads/code/magpie-rss.zip">di sini</a>.</p>

<p>Demikian ... cukup mudah bukan?
Selamat menampilkan rangkuman website orang di website anda sendiri. Jangan lupa memperhatikan etika dan hak cipta.</p>
]]></content>
  </entry>
  
</feed>
