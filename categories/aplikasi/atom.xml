<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aplikasi | Living life and make it better]]></title>
  <link href="http://endy.artivisi.com/blog/categories/aplikasi/atom.xml" rel="self"/>
  <link href="http://endy.artivisi.com/blog/"/>
  <updated>2012-08-14T23:36:28+07:00</updated>
  <id>http://endy.artivisi.com/blog/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Terima kasih Wordpress]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/terima-kasih-wordpress/"/>
    <updated>2012-08-09T13:54:00+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/terima-kasih-wordpress</id>
    <content type="html"><![CDATA[<p>Sejak pertama saya membuat blog, aplikasi yang saya gunakan adalah <a href="http://www.wordpress.org">Wordpress</a>. Aplikasi Wordpress sangat mudah digunakan dan banyak fiturnya. Selain itu, themes gratisan di internet juga berlimpah ruah, sehingga kita bisa ganti tampilan setiap hari kalau mau.</p>

<p>Walaupun demikian, zaman berganti, dan cara kita bekerja juga berubah. Saya saat ini lebih banyak berkutat di pemrograman dengan workflow sebagai berikut :</p>

<ol>
<li>Buka text editor</li>
<li>Edit source code</li>
<li>Jalankan di local dan test</li>
<li>Kalau sudah ok, simpan di version control (commit)</li>
<li>Ulangi ke langkah 2 sampai selesai</li>
<li>Begitu sudah siap untuk sharing hasil pekerjaan, upload (push) perubahan ke version control pusat.</li>
</ol>


<p>Workflow ini sayangnya tidak dapat dilakukan untuk menulis blog. Workflow saya dalam menulis blog biasanya seperti ini:</p>

<ol>
<li>Buka text editor</li>
<li>Ketik dalam format text file biasa, dengan menggunakan HTML tag bila perlu</li>
<li>Simpan di folder Dropbox selama masih draft</li>
<li>Setelah siap dipublish, buka Wordpress di browser</li>
<li>Login ke Wordpress</li>
<li>Create New Post</li>
<li>Copy - Paste dari text editor</li>
<li>Preview dan rapikan lagi</li>
<li>Publish</li>
</ol>


<p>Seperti bisa kita lihat, dengan workflow di atas, praktis fitur-fitur Wordpress yang serba canggih tidak termanfaatkan. Oleh karena itu, sudah tiba saatnya untuk mencari aplikasi blogging yang <strong>lebih sedikit</strong> fiturnya. Biasanya orang mengganti aplikasi dengan yang lebih banyak fiturnya, tapi kali ini saya melakukan hal yang sebaliknya.</p>

<!--more-->


<p>Setelah mencari berbagai alternatif, pilihan jatuh ke <a href="https://github.com/mojombo/jekyll/">Jekyll</a>. Jekyll adalah static content generator. Kita menulis artikel dalam format <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, yaitu text file biasa dengan sedikit markup yang enak dilihat mata. Kalau kita pernah mengedit wiki, format Markdown tidak asing lagi bagi kita.</p>

<p>Cara kerja Jekyll berbeda dengan aplikasi blog atau CMS pada umumnya. Kalau kita menggunakan Wordpress, Joomla, Drupal, dsb, artikel kita akan disimpan di database. Berdasarkan URL atau link yang diklik pengunjung, aplikasi CMS akan mencarikan artikel di database, memproses formattingnya, dan menampilkan ke browser. Aplikasi CMS biasanya kita instal di server kita di internet, sehingga server kita tersebut harus mendukung bahasa pemrograman yang digunakan CMS dan juga harus memiliki database server. Sebagai contoh, untuk menjalankan Wordpress, server kita harus bisa PHP dan memiliki MySQL.</p>

<p>Berbeda dengan Wordpress, Joomla, Drupal, dan CMS pada umumnya, blog yang dibuat dengan Jekyll tidak dynamic. Semua variabel dan logika looping diproses di komputer kita sendiri. Hasil pemrosesan ini menghasilkan file HTML yang sudah jadi. File HTML inilah yang kita upload ke server. Dengan demikian, di dalam server semua file bersifat static.</p>

<p>Ada beberapa konsekuensi dari static website seperti ini.
Sisi positifnya :</p>

<ul>
<li>kebutuhan server menjadi lebih sederhana, tidak perlu lagi PHP dan MySQL</li>
<li>halaman artikel bisa ditampilkan dengan lebih cepat karena tidak perlu query dan pemrosesan</li>
<li>karena tidak ada query dan proses, mau berapapun request per detik tidak terlalu membebani CPU/RAM/Disk</li>
<li>anti dihack, kecuali sistem operasinya yang ditembus. Kalau kita pakai Wordpress dkk, kita harus rajin upgrade untuk menambal bug security yang baru saja difix.</li>
</ul>


<p>Sisi negatifnya :</p>

<ul>
<li>tidak bisa menampung komentar. Ini saya atasi dengan Facebook Comment.</li>
</ul>


<p>Nah, karena positifnya lebih banyak dari negatifnya, maka saya putuskan untuk migrasi.</p>

<p>Saya tidak menggunakan Jekyll yang aslinya, melainkan framework yang dibuat di atas Jekyll. Ada beberapa pilihan, misalnya <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap (JB)</a>, <a href="http://ruhoh.com/">Ruhoh</a>, dan <a href="http://octopress.org">Octopress</a>. Ruhoh rupanya dibuat oleh orang yang sama dengan pembuat JB karena dia sudah bosan dengan JB, dan nampaknya dia juga sedang sibuk sehingga Ruhoh juga tidak dimaintain. Jadilah pilihan jatuh ke Octopress.</p>

<p>Octopress memiliki berbagai fitur, diantaranya:</p>

<ul>
<li>Source code formatting. Ini adalah fitur yang sulit digunakan di Wordpress. Harus instal berbagai plugin dan sering berantakan tampilannya. Ini menyebabkan saya harus menggunakan <a href="http://gist.github.com">Gist</a>.</li>
<li>Deploy script ke Github, Heroku, dan rsync. Dengan fitur ini, saya bisa membuat <a href="http://endymuhardin.github.com">mirror blog saya di Github</a>.</li>
<li>Berbagai plugin yang sudah disertakan secara built in, misalnya tag khusus untuk image dan video.</li>
</ul>


<p>Proses migrasi berjalan sebagai berikut :</p>

<ol>
<li>Setup Octopress</li>
<li>Customize theme</li>
<li>Unduh artikel lama di Wordpress menggunakan <a href="https://github.com/thomasf/exitwp/">exitwp.py</a></li>
<li>Bersihkan beberapa tag yang tidak kompatibel, diantaranya tabel, gist, dan image</li>
<li>Pindahkan artikel ke Octopress</li>
<li>Generate dan deploy</li>
</ol>


<h1>Setup Octopress</h1>

<p>Octopress disiapkan dengan beberapa langkah berikut :
1. Install Ruby dengan RVM
2. Install Jekyll
3. Clone repository Octopress
4. Konfigurasi Octopress</p>

<p>Ada beberapa konfigurasi yang saya lakukan, yaitu :</p>

<h2>Informasi Umum</h2>

<p><code>ruby _config.yml
url: http://endy.artivisi.com/blog
title: Living life and make it better
subtitle: life, learn, contribute
author: Endy Muhardin
</code></p>

<h2>Permalink</h2>

<p>Supaya sama dengan URL blog lama, format URL di Octopress juga harus disesuaikan sbb :</p>

<p><code>ruby _config.yml
permalink: /:categories/:title/
</code></p>

<h2>Pagination</h2>

<p>Di halaman pertama cukup tampilkan 3 entri terbaru. Di sidebar, tampilkan 10 link artikel terakhir.</p>

<p><code>ruby _config.yml
paginate: 3
recent_posts: 10
</code></p>

<h1>Customize Theme</h1>

<p>Supaya tidak keliatan seragam, saya mencari theme untuk Octopress. Sejauh ini baru menemukan <a href="https://github.com/amelandri/darkstripes">Darkstripes</a>, jadi langsung saja dipasang.</p>

<h1>Mengolah artikel lama</h1>

<p>Sebetulnya ada beberapa cara untuk memigrasi artikel lama. Saya menggunakan exitwp yang nampaknya lebih mudah. Berikut langkah-langkahnya :</p>

<ol>
<li>Export dulu artikel lama dari Wordpress ke format XML.</li>
<li>Jalankan exitwp.py untuk mengkonversi ke format markdown.</li>
</ol>


<h2>Memproses tag image</h2>

<p>Selanjutnya, saya harus membersihkan tag image dan caption bawaan Wordpress, karena tidak bisa tampil dengan baik. Saya menggunakan perintah sed di linux agar bisa memproses banyak file sekaligus.</p>

<p></p>

<p>Berikut perintah untuk memperbaiki tag image yang tadinya seperti ini <code>![Synergy Screenshot](/images/uploads/2006/05/synergy.gif)</code> menjadi seperti ini <code>{% img /uploads/2006/05/synergy.gif Synergy Screenshot %} </code>, saya gunakan perintah berikut :</p>

<p><code>
find . -name "*.markdown" -print | xargs sed -i "s|\[!\[\(.*\)\](\(.*\))\](\(.*\))|{% img \2 \1 %}|g"
</code></p>

<p>Tag caption juga harus dihilangkan, berikut perintahnya:</p>

<p><code>
find . -name "*.markdown" -print | xargs sed -i "s|\[caption.*\]\(.*\)\[/caption\]|\1|g"
</code></p>

<p>Secara default, exitwp akan menghasilkan tag image dengan URL lengkap, misalnya <code>http://endy.artivisi.com/blog/wp-content|/images/uploads/2006/05/synergy.gif</code> dan masih mengarah ke Wordpress. Saya ingin mengubah ini menjadi URL relatif, yaitu <code>/images/uploads/2006/05/synergy.gif</code></p>

<p>Berikut perintahnya :</p>

<p><code>
find . -name "*.markdown" -print | xargs sed -i "s|http://endy.artivisi.com/blog/wp-content|/images|g"
</code></p>

<h2>Memproses tag gist</h2>

<p>Seperti saya tuliskan di sini, saya menggunakan plugin Wordpress untuk <a href="http://endy.artivisi.com/blog/Aplikasi/menggunakan-gist/">menampilkan Gist</a>. Octopress sudah memiliki dukungan sendiri terhadap Gist, sehingga harus ada proses konversi. Berikut perintahnya :</p>

<p><code>
find . -name "*.markdown" -print | xargs sed -i "s|\[gist id=\(.*\) file=\(.*\)\]|{% gist \1 \2 %}|g"
find . -name "*.markdown" -print | xargs sed -i "s| bump=.||g"
</code></p>

<h1>Facebook Comment</h1>

<p>Untuk menggantikan fitur komentar, ada beberapa alternatif yang bisa digunakan, diantaranya :</p>

<ul>
<li>Disqus</li>
<li>Facebook</li>
<li>Tanpa comment</li>
</ul>


<p>Melihat audiens blog yang rata-rata memiliki akun Facebook, maka baiklah kita pilih Facebook saja. Cara mengaktifkannya bisa dibaca <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">di tutorial ini</a>. Ada sedikit bug disana, yaitu pada file <code>post.html</code> dan <code>page.html</code>. Harusnya seperti ini :</p>

<p>``` ruby
{% if site.facebook_appid and page.comments == true %}
  <section></p>

<pre><code>&lt;h1&gt;Comments&lt;/h1&gt;
&lt;div id="facebook_comments" aria-live="polite"&gt;
  {% include post/facebook_comments.html %}
&lt;/div&gt;
</code></pre>

<p>  </section>
{% endif %}
```
</p>

<h1>Penutup</h1>

<p>Sebetulnya sedih juga berpisah dengan Wordpress yang telah setia menemani hampir 7 tahun lamanya, tapi life must go on. Wordpress, terima kasih atas kebersamaan selama 7 tahun ini. Mudah-mudahan engkau akan berevolusi lebih baik lagi sehingga di lain waktu kita bisa bersama lagi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalasi Redmine di Tomcat]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/linux/redmine-jruby-tomca/"/>
    <updated>2011-08-07T04:06:01+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/linux/redmine-jruby-tomca</id>
    <content type="html"><![CDATA[<p>Ada berbagai cara instalasi Redmine, diantaranya:</p>

<ul>
<li><p>Dijalankan langsung dari command prompt dengan Webrick</p></li>
<li><p>Dijalankan menggunakan Mongrel dan FastCGI</p></li>
<li><p>Dijalankan menggunakan Ruby Enterprise Edition dan Passenger</p></li>
<li><p>Dibuat menjadi war dan dideploy ke application server Java seperti Tomcat, Glassfish, dsb</p></li>
</ul>


<p>Pada artikel ini, kita akan mencoba cara terakhir, yaitu menggunakan Tomcat untuk menghosting Redmine.
Ini saya lakukan supaya semua tools manajemen proyek ArtiVisi bisa disatukan di satu Tomcat, sehingga memudahkan kegiatan maintenance.
Sebelum Redmine, Tomcat ArtiVisi juga menghosting :</p>

<ul>
<li><p><a href="http://nexus.sonatype.org/">Nexus</a></p></li>
<li><p><a href="http://jenkins-ci.org/">Jenkins</a></p></li>
</ul>


<p>Dan nantinya, kalau sudah ada waktu dan kesempatan, juga akan menghosting <a href="http://code.google.com/p/gerrit/">Gerrit</a></p>

<p>Mari kita mulai.</p>

<h2>Instalasi JRuby</h2>

<p>Pertama, kita <a href="http://jruby.org/">Download JRuby</a>. Setelah itu, extract di folder yang diinginkan (contohnya /opt)</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-jruby.sh'></script>
<noscript><pre><code>cd /opt
tar xzf ~/Downloads/jruby-bin-1.6.3.tar.gz
chown -R endy.endy /opt/jruby-1.6.3
ln -s jruby-1.6.3 jruby</code></pre></noscript></div>
</p>

<p>Daftarkan jruby ke variabel PATH, supaya bisa diakses langsung dari command line.
Tulis baris berikut ini di dalam file ~/.bashrc</p>

<p><div><script src='https://gist.github.com/1129237.js?file=bashrc'></script>
<noscript><pre><code>export JRUBY_HOME=/opt/jruby
export PATH=$PATH:$JRUBY_HOME/bin</code></pre></noscript></div>
</p>

<p>Terakhir, test instalasi JRuby</p>

<p><div><script src='https://gist.github.com/1129237.js?file=test-jruby.sh'></script>
<noscript><pre><code>jruby -v
jruby 1.6.3 (ruby-1.8.7-p330) (2011-07-07 965162f) (Java HotSpot(TM) Client VM 1.6.0_26) [linux-i386-java]</code></pre></noscript></div>
</p>

<h2>Instalasi Paket Gem</h2>

<p>Redmine membutuhkan beberapa library Ruby yang dipaket dalam format gem, yaitu :</p>

<ul>
<li><p>rack versi 1.1.1 : ini adalah library untuk web server</p></li>
<li><p>rails versi 2.3.11 (dibutuhkan karena kita akan menginstal Redmine dari Subversion, bukan dari distribusi)</p></li>
<li><p>jruby-openssl : supaya bisa melayani https</p></li>
<li><p>activerecord-jdbcmysql-adapter : library untuk koneksi database</p></li>
<li><p>warbler : packager supaya Redmine bisa dibuat jadi war dan dideploy ke Tomcat</p></li>
</ul>


<p>Mari kita install</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-gem.sh'></script>
<noscript><pre><code>gem install rack -v=1.1.1
gem install rails -v=2.3.11
gem install jruby-openssl activerecord-jdbcmysql-adapter warbler</code></pre></noscript></div>
</p>

<p>Semua paket sudah lengkap, mari kita lanjutkan ke</p>

<h2>Mengambil Redmine dari Subversion Repository</h2>

<p>Sebetulnya ada dua pilihan untuk mendapatkan Redmine, download versi rilis atau checkout langsung dari Subversion.
Saya lebih suka checkout langsung supaya nanti lebih gampang upgrade manakala rilis baru sudah terbit.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=checkout-redmine.sh'></script>
<noscript><pre><code>cd ~/Downloads
svn co http://redmine.rubyforge.org/svn/branches/1.2-stable redmine-1.2</code></pre></noscript></div>
</p>

<p>Tunggu sejenak sampai proses checkout selesai. Setelah selesai, kita bisa langsung ke langkah selanjutnya.</p>

<h2>Konfigurasi Database</h2>

<p>Masuk ke folder Redmine, lalu copy file config/database.yml.example ke database.yml, kemudian edit.
Saya menggunakan konfigurasi development sebagai berikut :</p>

<p><div><script src='https://gist.github.com/1129237.js?file=database.yml'></script>
<noscript><pre><code>development:
  adapter: jdbcmysql
  database: redmine
  host: localhost
  username: redmine
  password: redmine
  encoding: utf8</code></pre></noscript></div>
</p>

<p>Tentunya kita harus sediakan database dengan konfigurasi tersebut di MySQL. Login ke MySQL, kemudian buatlah database dan usernya.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=create-database.sh'></script>
<noscript><pre><code>mysql -u root -p

create database redmine character set utf8;
create user 'redmine'@'localhost' identified by 'redmine';
grant all privileges on redmine.* to 'redmine'@'localhost';</code></pre></noscript></div>
</p>

<p>Setelah databasenya selesai dibuat, selanjutnya kita akan melakukan inisialisasi.</p>

<h2>Inisialisasi Redmine</h2>

<p>Pertama, kita inisialisasi dulu session store. Ini digunakan untuk menyimpan cookie dan session variabel.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-session.sh'></script>
<noscript><pre><code>cd ~/Downloads/redmine-1.2
rake generate_session_store</code></pre></noscript></div>
</p>

<p>Setelah itu, inisialisasi skema database.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-skema-db.sh'></script>
<noscript><pre><code>RAILS_ENV=development rake db:migrate</code></pre></noscript></div>
</p>

<p>Isi data awal.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-data-awal.sh'></script>
<noscript><pre><code>RAILS_ENV=development rake redmine:load_default_data</code></pre></noscript></div>
</p>

<p>Setelah terisi, selanjutnya kita bisa test jalankan Redmine.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=start-webrick.sh'></script>
<noscript><pre><code>jruby script/server webrick -e development</code></pre></noscript></div>
</p>

<p>Hasilnya bisa kita browse di http://localhost:3000
Kemudian kita bisa login dengan username admin dan password admin.</p>

<h2>Konfigurasi Email</h2>

<p>Issue tracker yang baik harus bisa mengirim email, supaya dia bisa memberikan notifikasi pada saat ada issue baru ataupun perubahan terhadap issue yang ada.
Redmine versi 1.2 membutuhkan file konfigurasi yang bernama configuration.yml, berada di folder config. Berikut isi file configuration.yml untuk mengirim email ke Gmail.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=configuration.yml'></script>
<noscript><pre><code># = Outgoing email settings
development:
    email_delivery:
        delivery_method: :smtp
        smtp_settings:
            tls: true
            address: &quot;smtp.gmail.com&quot;
            port: 587
            authentication: :plain
            user_name: &quot;nama.kita@gmail.com&quot;
            password: &quot;passwordgmailkita&quot;</code></pre></noscript></div>
</p>

<p>Selain itu, kita juga harus menginstal plugin action_mailer_optional_tls, seperti dijelaskan <a href="http://redmineblog.com/articles/setup-redmine-to-send-email-using-gmail/">di sini</a>.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-action-mailer-tls.sh'></script>
<noscript><pre><code>jruby script/plugin install git://github.com/collectiveidea/action_mailer_optional_tls.git
</code></pre></noscript></div>
</p>

<p>Coba restart Redmine, sesuaikan alamat email kita dengan cara klik link My Account di pojok kanan atas.
Di dalamnya ada informasi tentang email. Ganti dengan alamat email kita.
Kemudian pergi ke menu Administration > Settings > Email Notifications,
kemudian klik link Send a test email di pojok kanan bawah.
Tidak lama kemudian, seharusnya test email dari Redmine sudah masuk di mailbox kita.</p>

<p>Dengan demikian, Redmine sudah berhasil kita instal dan konfigurasi dengan baik.
Selanjutnya, kita akan paketkan supaya bisa dideploy di Tomcat.</p>

<h2>Generate WAR</h2>

<p>Pertama, kita harus inisialisasi dulu konfigurasi warble.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble-config.sh'></script>
<noscript><pre><code>warble config
</code></pre></noscript></div>
</p>

<p>Dia akan menghasilkan file config/warble.rb. Mari kita edit sehingga menjadi seperti ini.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble.rb'></script>
<noscript><pre><code>Warbler::Config.new do |config|
  config.dirs = %w(app config lib log vendor tmp extra files lang)
  config.gems += [&quot;activerecord-jdbcmysql-adapter&quot;, &quot;jruby-openssl&quot;, &quot;i18n&quot;, &quot;rack&quot;]
  config.webxml.rails.env = ENV['RAILS_ENV'] || 'development'
end</code></pre></noscript></div>
</p>

<p>Selanjutnya, kita tinggal menjalankan perintah warble untuk menghasilkan file war.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble-generate.sh'></script>
<noscript><pre><code>warble
warning: application directory `lang' does not exist or is not a directory; skipping
rm -f redmine-1.2.war
Creating redmine-1.2.war</code></pre></noscript></div>
</p>

<p>File war yang dihasilkan tinggal kita deploy ke Tomcat</p>

<p><div><script src='https://gist.github.com/1129237.js?file=redmine-war-deploy.sh'></script>
<noscript><pre><code>cp redmine-1.2.war /opt/apache-tomcat-7.0.12/webapps/redmine.war
</code></pre></noscript></div>
</p>

<p>Jalankan Tomcat, dan Redmine bisa diakses di http://localhost:8080/redmine</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalasi Spket IDE]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/programming/instalasi-spket-ide/"/>
    <updated>2011-07-07T02:16:13+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/programming/instalasi-spket-ide</id>
    <content type="html"><![CDATA[<p>Beberapa minggu terakhir ini, saya mencari-cari cara terbaik untuk melakukan development dengan ExtJS.
Tentunya fitur utama yang kita inginkan adalah autocomplete,
sehingga tidak perlu bolak-balik membaca dokumentasi di websitenya.</p>

<p>Setelah berhari-hari mencari, akhirnya saya menemukan <a href="http://www.spket.com">Spket IDE</a>.
Di websitenya dinyatakan bahwa Spket sudah mendukung ExtJS versi 4, membuat saya tertarik untuk mencobanya.
Sayangnya, petunjuk instalasi sulit didapat, sehingga harus trial-and-error.</p>

<p>Di artikel ini, kita akan membahas petunjuk instalasi Spket IDE di Eclipse Indigo.</p>

<h2>Klik menu Install New Software</h2>

<p><img src="/images/uploads/2011/07/01.-Install-New-Software.png" title="" ></p>

<h2>Masukkan Update Site Spket IDE</h2>

<p>Tambahkan Update Site yang baru
<img src="/images/uploads/2011/07/02.-Add-Update-Site.png" title="" ></p>

<p>Update sitenya adalah http://www.spket.com/update/</p>

<p><img src="/images/uploads/2011/07/03.-Lokasi-Update-Site-Spket.png" title="" ></p>

<h2>Opsi Instalasi Spket</h2>

<p><img src="/images/uploads/2011/07/04.-Centang-Semua-Opsi.png" title="" ></p>

<h2>Klik Next</h2>

<p><img src="/images/uploads/2011/07/05.-Next-Terus.png" title="" ></p>

<p><img src="/images/uploads/2011/07/06.-Sit-Back-and-Relax.png" title="" ></p>

<p><img src="/images/uploads/2011/07/07.-Ada-Warning-Lanjut-Saja.png" title="" ></p>

<p>Ada warning, klik saja Yes.</p>

<h2>Download Support ExtJS 4</h2>

<p>Agar bisa mengenali ExtJS 4, kita harus <a href="http://forums.spket.com/viewtopic.php?f=6&amp;t=1866">mengunduh update terbaru dari forumnya</a>.
Entah apa alasannya, tiap ada update baru, versi jarnya tidak dinaikkan dan update sitenya tidak diperbarui.
Ini menyebabkan kita harus mengunduh file dari forum.</p>

<p>Ada dua file yang harus diunduh, yaitu jar
<img src="/images/uploads/2011/07/08.-Download-jar-terbaru.png" title="" ></p>

<p>dan jsb
<img src="/images/uploads/2011/07/09.-Dukungan-Ext-4.png" title="" >
Hasilnya, kita akan memiliki dua file.
<img src="/images/uploads/2011/07/13.-Hasil-donlod-dari-forum-spket.png" title="" ></p>

<h2>Patch Eclipse</h2>

<p>File jar akan kita pasang di folder plugins di tempat Eclipse terinstal.<br/>
<img src="/images/uploads/2011/07/11.-Folder-Plugin-Eclipse.png" title="" ></p>

<p>Ini akan menimpa file dengan nama sama.
<img src="/images/uploads/2011/07/14.-Replace-dengan-yang-baru.png" title="" ></p>

<h2>Patch ExtJS</h2>

<p>Sedangkan file jsb akan kita pasang di folder ExtJS 4.
<img src="/images/uploads/2011/07/15.-Masukkan-jsb-ke-folder-extjs.png" title="" ></p>

<h2>Edit jsb</h2>

<p>Sayangnya, file jsb ini juga masih ada bugnya. Dia salah menyebutkan nama file dalam folder pkgs.
Kita harus edit, ganti <code>all.js</code> menjadi <code>classes.js</code>.
<img src="/images/uploads/2011/07/16.-Edit-file-jsb-sesuai-nama-file.png" title="" ></p>

<h2>Konfigurasi Spket</h2>

<p>Selanjutnya, kita masuk ke menu preferences untuk melakukan konfigurasi.
<img src="/images/uploads/2011/07/17.-Konfigurasi-Spket.png" title="" >
Masuk ke menu Spket - Javascript Profile
<img src="/images/uploads/2011/07/18.-Javascript-Profile.png" title="" >
Tambah Profile baru, beri nama ExtJS
<img src="/images/uploads/2011/07/19.-Tambah-profile-baru.png" title="" >
Di profile yang baru saja ditambahkan, Add Library dan pilih ExtJS
<img src="/images/uploads/2011/07/20.-Tambah-library-ExtJS.png" title="" >
Setelah itu, Add File jsb yang sudah kita edit tadi.
<img src="/images/uploads/2011/07/21.-Add-File-JSB.png" title="" >
Lalu, set profile ExtJS menjadi default
<img src="/images/uploads/2011/07/22.-Set-Profile-ExtJS-sebagai-default.png" title="" >
Kemudian, pergi ke menu General - Editors - File Associations. Pilih file js, dan jadikan Spket sebagai editornya.
<img src="/images/uploads/2011/07/23.-Set-file-associations.png" title="" >
Klik Ok, restart Eclipse.
<img src="/images/uploads/2011/07/10.-Restart-Eclipse.png" title="" ></p>

<h2>Code Completion</h2>

<p>Sekarang kita bisa melakukan code completion pada saat memberi titik di depan object.
<img src="/images/uploads/2011/07/24.-Autocomplete-method.png" title="" >
Atau juga pada saat mengetik di dalam tanda kurung.
<img src="/images/uploads/2011/07/25.-Autocomplete-property.png" title="" ></p>

<p>Demikianlah cara instalasi Spket IDE di Eclipse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Screencast]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/linux/membuat-screencast/"/>
    <updated>2011-06-28T01:03:23+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/linux/membuat-screencast</id>
    <content type="html"><![CDATA[<p>Jaman sekarang sudah semakin maju. Fakir bandwidth semakin sedikit. Oleh karena itu, media komunikasi juga berubah, yang tadinya berbasis teks (hemat bandwidth) menjadi multimedia (rakus bandwidth).</p>

<p>Demi mengikuti perkembangan jaman, saya mengeksplorasi pembuatan tutorial dalam bentuk screencast. Ternyata hasilnya memuaskan. Dengan beberapa menit merekam screencast, informasi yang disampaikan sama dengan beberapa jam mengetik blog entry.</p>

<p>Artikel ini saya tulis untuk mendokumentasikan langkah-langkah membuat screencast, mulai dari merekam screencast, sampai mempublikasikannya di blog.</p>

<h2>Merekam video</h2>

<p>Di Ubuntu ada dua aplikasi yang saya coba, yaitu Xvidcap dan Record My Desktop. Dua-duanya sama fungsinya dan tidak ada perbedaan yang signifikan. Setelah mencoba keduanya, pendapat saya adalah Record My Desktop lebih mudah digunakan. Jadi, inilah aplikasi yang saya pilih.</p>

<p>Perlu diperhatikan kemampuan prosesor komputer Anda. Ini kaitannya dengan setting frame per second (fps). Bila fps melebihi kemampuan prosesor, video yang kita rekam akan terlihat lebih cepat dari sebenarnya. Di laptop saya, setting 15 fps akan menghasilkan video yang kira-kira 2x lebih cepat. Setelah trial and error, saya temukan bahwa 9 fps adalah setting yang tepat.</p>

<p>Perbedaan yang utama di antara kedua aplikasi ini adalah format outputnya. Record My Desktop mengeluarkan format ogv sedangkan Xvidcap mengeluarkan format mpeg. Perbedaan format ini nantinya akan mempengaruhi langkah pemrosesan selanjutnya.</p>

<h2>Merekam suara</h2>

<p>Biasanya, saya merekam suara dalam proses yang terpisah, supaya tidak banyak ehm dan eee. Rekaman dibuat sambil menonton screencast yang sudah kita rekam. Setelah rekaman suara dibuat, bisa diedit dengan menggunakan aplikasi Audacity untuk menghilangkan noise, memotong bagian yang tidak penting, dan sebagainya.</p>

<h2>Menggabungkan video dan audio</h2>

<p>Selanjutnya, kita menggunakan aplikasi Avidemux untuk menggabungkan file audio dan file video menjadi satu file. Dengan aplikasi ini kita juga bisa mengedit video untuk menghilangkan bagian-bagian yang tidak perlu ataupun menyambung beberapa video menjadi satu.</p>

<h2>Mempersiapkan format video untuk web</h2>

<p>Ada berbagai format video yang tersedia. Masing-masing format memiliki dukungan browser yang berbeda-beda. Daftar lengkapnya bisa dilihat <a href="http://diveintohtml5.info/video.html#what-works">di sini</a></p>

<p>Pada intinya, supaya bisa dilihat di berbagai browser, kita harus menyediakan file dengan format ogv, mp4, dan webm. Kita juga harus menyertakan poster dalam format jpg atau png supaya bisa ditampilkan dengan benar di browser.</p>

<p>Ada beberapa script yang bisa digunakan, misalnya <a href="https://github.com/kwiliarty/vfe-sh">ini</a> atau <a href="http://brettterpstra.com/automating-html5-video-encodes/">ini</a></p>

<p>Atau, kita juga bisa menjalankan commandnya satu persatu di command line. Berikut adalah command yang saya jalankan :</p>

<p>Konversi dari ogv menjadi mp4
<div><script src='https://gist.github.com/1048657.js?file=ogv-to-mp4.sh'></script>
<noscript><pre><code>ffmpeg -vcodec libx264 -vpre lossless_medium -i file-input.ogv file-output.mp4</code></pre></noscript></div>
</p>

<p>Konversi dari ogv menjadi webm
<div><script src='https://gist.github.com/1048657.js?file=ogv-to-webm.sh'></script>
<noscript><pre><code>ffmpeg -pass 1 -passlogfile file-input.ogv -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i file-input.ogv -vcodec libvpx -b 614400 -s 640x480 -aspect 4:3 -an -y tmp.webm

rm tmp.webm

ffmpeg -pass 2 -passlogfile file-input.ogv -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i file-input.ogv -vcodec libvpx -b 614400 -s 640x480 -aspect 4:3 -an -y file-output.webm
</code></pre></noscript></div>
</p>

<p>Command di atas mungkin berbeda bila file asli kita formatnya adalah mpeg seperti yang dihasilkan oleh XVidcap.</p>

<p>Membuat poster
<div><script src='https://gist.github.com/1048657.js?file=create-poster.sh'></script>
<noscript><pre><code>ffmpeg -r 1 -t 1 -vframes 1 -i input-file.mp4  output-file.png</code></pre></noscript></div>
</p>

<h2>Upload</h2>

<p>Setelah semua file(ogv,mp4,png) terkumpul di satu folder, kita upload menggunakan rsync
<div><script src='https://gist.github.com/1048657.js?file=upload-to-server.sh'></script>
<noscript><pre><code>rsync -avz /path/to/video/folder user@example.com:/home/user/public_html/videos</code></pre></noscript></div>
</p>

<h2>Tampilkan di blog</h2>

<p>Terakhir, kita ingin menayangkan video tersebut di blog kita. Karena saya menggunakan wordpress, saya pasang <a href="http://open.pages.kevinwiliarty.com/external-video-for-everybody/">plugin External Video for Everybody</a>. Plugin ini menampilkan video player di browser kita, supaya orang lain bisa langsung klik tombol play. Di belakang layar, plugin ini mendeteksi apakah browser kita mendukung HTML 5 atau tidak. Kalau iya, maka video akan ditampilkan dengan tag khusus &lt;video&gt;. Bila tidak, maka flash player akan digunakan. Flash player ini tidak disediakan oleh plugin ini. Kita perlu memilih dan mendownload sendiri dari sekian banyak flash player yang tersedia, contohnya <a href="http://www.longtailvideo.com/players/jw-flv-player/">JW Player</a></p>

<p>Sebagai penutup, bisa melihat <a href="http://linuxandfriends.com/2009/07/13/how-to-create-a-screencast-in-ubuntu-linux/">tutorial ini</a> yang saya gunakan sebagai titik awal eksplorasi saya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menghapus file secara permanen di Git]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/menghapus-file-secara-permanen-di-git/"/>
    <updated>2011-04-03T05:06:42+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/menghapus-file-secara-permanen-di-git</id>
    <content type="html"><![CDATA[<p>Salah satu keuntungan menggunakan version control adalah dia akan menyimpan semua history perubahan. Dengan demikian, walaupun kita sudah menghapus satu file tertentu, sebetulnya file tersebut masih ada di repository dan bisa dimunculkan kembali kapan saja.</p>

<p>Hal ini menimbulkan beberapa konsekuensi, diantaranya</p>

<ul>
<li><p>Ukuran repository menjadi besar. Ini terutama sangat terasa di Git, karena pada waktu clone, kita akan mengambil keseluruhan perubahan dari pertama hingga terakhir. Berbeda dengan Subversion, dimana kita hanya mendapat perubahan terakhir saja.</p></li>
<li><p>File-file yang mengandung informasi rahasia --seperti misalnya password-- tidak terhapus secara sempurna, sehingga bisa disalahgunakan orang lain.</p></li>
</ul>


<p>Untuk itu, kita perlu cara untuk menghilangkan file ini secara permanen.</p>

<p>Di Git, caranya adalah menggunakan perintah <code>git filter-branch</code> seperti <a href="http://help.github.com/removing-sensitive-data/">dijelaskan di sini</a>. Walaupun demikian, tutorial tersebut tidak menjelaskan bagaimana cara menghapus folder.</p>

<p>Di ArtiVisi, <a href="https://github.com/dadang">Dadang</a> dan <a href="https://github.com/donraakan">Doni</a> mengalami kejadian tersebut, dimana folder konfigurasi Eclipse (.project, .classpath, .settings) dan file hasil kompilasi Maven (target) ikut serta dicommit. Ini menyulitkan fakir bandwidth yang ingin melakukan clone, karena ukuran reponya menjadi besar sekali. Karena itu, file dan folder tersebut harus dihapus secara permanen.</p>

<p>Cara menghapusnya adalah sebagai berikut.</p>

<h2>Pastikan versi repository di local dan di remote sudah sama</h2>

<p>Ini bisa dilakukan dengan menggunakan perintah git pull dan git push. Selanjutnya, kita masuk ke folder kerja, dan memanggil perintah berikut.</p>

<p>Perintah di atas akan memodifikasi seluruh commit untuk menghilangkan file dan folder tersebut. Konsekuensinya, seluruh downline Anda akan terpaksa melakukan clone ulang, karena ini sama saja mengganti repository tersebut dengan repository baru. Akibatnya, commit, push, pull, dan merge tidak akan berjalan dengan baik.</p>

<p>Periksa kembali repository Git Anda setelah melakukan perintah di atas, pastikan semuanya baik-baik saja.
Begitu yakin, kita push ke remote.</p>

<p><code>
git push origin master --force
</code></p>

<p>Setelah melakukan perintah di atas, file yang terhapus itu masih ada di object database Git kita di local, sehingga ukuran reponya masih belum berkurang secara signifikan.
Karena sudah kita push ke remote, hapus saja repo local yang sekarang, dan lakukan clone ulang dari remote.</p>

<p>Demikian cara membersihkan repository dari file yang tidak sengaja dicommit. Silahkan mencoba.</p>
]]></content>
  </entry>
  
</feed>
