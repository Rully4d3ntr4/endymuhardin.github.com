<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lain | Living life and make it better]]></title>
  <link href="http://endy.artivisi.com/blog/categories/lain/atom.xml" rel="self"/>
  <link href="http://endy.artivisi.com/blog/"/>
  <updated>2012-08-14T23:40:34+07:00</updated>
  <id>http://endy.artivisi.com/blog/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instalasi Git di Windows]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/lain/instalasi-git-di-windows/"/>
    <updated>2011-01-07T18:28:25+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/lain/instalasi-git-di-windows</id>
    <content type="html"><![CDATA[<p>Setelah kemarin kita bahas <a href="http://endy.artivisi.com/blog/lain/migrasi-subversion-ke-git/">migrasi di sisi server</a>, sekarang kita bahas instalasi di client. Kenapa yang dijelaskan hanya Windows, sedangkan Linux tidak? Well, ini karena di Linux instalasinya begitu mudah sehingga terlalu pendek kalau ingin dijadikan satu posting sendiri.</p>

<p>Gak percaya? Ini caranya install di Ubuntu. Buka command prompt, dan ketik</p>

<pre><code>sudo apt-get install git-core git-svn git-gui gitk
</code></pre>

<p>Sedikit konfigurasi standar.</p>

<pre><code>git config --global user.name "Endy Muhardin"
git config --global user.email "endy.muhardin@geemail.com"
git config --global color.ui "true"
</code></pre>

<p>Kemudian, bila kita belum punya public key, silahkan bikin seperti <a href="http://endy.artivisi.com/blog/linux/login-ssh-dengan-private-key/">tutorial di sini</a>.</p>

<p>Dan selesailah sudah. Seperti saya bilang sebelumnya, singkat dan sama sekali gak seru. Gak ada screenshotnya :D</p>

<p>Nah, mari kita bahas instalasi di Windows.</p>

<p>Pada intinya, langkah-langkahnya adalah sebagai berikut :</p>

<ol>
<li><p>Instalasi Putty : Ini kita perlukan untuk membuat public key. Public key digunakan untuk berinteraksi dengan repository git di server. Apa itu public key dan apa manfaatnya sedikit banyak sudah dibahas <a href="http://endy.artivisi.com/blog/linux/login-ssh-dengan-private-key/">di artikel ini</a>.</p></li>
<li><p>Instalasi Git : Ini adalah aplikasi Git nya sendiri. Ada dua varian, Cygwin dan MSysGit. Kita akan gunakan yang lebih populer, yaitu MSysGit.</p></li>
<li><p>Instalasi TortoiseGit : Seperti TortoiseSVN, ini adalah aplikasi GUI yang terintegrasi dengan Windows Explorer, sehingga pengelolaan repository dapat dilakukan di Windows Explorer seperti manipulasi file/folder biasa.</p></li>
</ol>


<h2>Instalasi Putty</h2>

<p>Putty bisa diunduh <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">di sini</a>. Pilih saja versi installer, supaya tidak pusing.</p>

<p>Putty ini akan kita gunakan untuk membuat pasangan public key dan private key. Caranya adalah menggunakan aplikasi PuttyGen. Jalankan PuttyGen, dan klik tombol Generate.
<img src="/images/uploads/2011/01/01-ssh-generate-keypair-300x290.png" title="Generate keypair" ></p>

<p>PuttyGen akan membuatkan public key dan private key. Save private keynya. Kita akan membutuhkan ini nanti. Klik tombol Save Private Key, dan simpan di folder mana saja.
<img src="/images/uploads/2011/01/02-ssh-save-keypair-300x210.png" title="" ></p>

<p>Terakhir, copy-paste text public keynya. Ini akan kita perlukan untuk dipasang di server supaya kita bisa mengakses repository di server, misalnya Github atau repository kantor.
<img src="/images/uploads/2011/01/03-ssh-export-public-key-300x236.png" title="" ></p>

<h2>Instalasi Git</h2>

<p>Pertama, <a href="http://code.google.com/p/msysgit/">unduh dulu MSysGit</a>. Di websitenya ada banyak file yang bisa diunduh. Kita perlu yang Git, bukan msysgit. Nama filenya diawali Git, seperti ini: Git-1.7.3.1-preview20101002.exe. Ambil saja versi yang terbaru.</p>

<p>Setelah diunduh, tentu kita jalankan. Berikut screenshot next-next seperti biasa.</p>

<p><img src="/images/uploads/2011/01/01-msysgit-install-welcome-300x230.png" title="" ></p>

<p><img src="/images/uploads/2011/01/02-msysgit-install-component-300x233.png" title="" ></p>

<p><img src="/images/uploads/2011/01/03-msysgit-install-path-300x232.png" title="" ></p>

<p><img src="/images/uploads/2011/01/04-msysgit-install-crlf-300x232.png" title="" ></p>

<h2>Instalasi TortoiseGit</h2>

<p>TortoiseGit bisa <a href="http://code.google.com/p/tortoisegit/">diunduh di sini</a>.
Setelah selesai mengunduh, lagi-lagi klik next-next.</p>

<p><img src="/images/uploads/2011/01/01-tortoisegit-install-welcome-300x233.png" title="" ></p>

<p><img src="/images/uploads/2011/01/02-tortoisegit-install-sshclient-300x231.png" title="" ></p>

<p>Sampai di sini, instalasi Git sudah selesai. Tapi masih ada langkah tambahan supaya kita bisa melakukan clone dari repository server (misalnya Github).</p>

<h2>Clone dari Github</h2>

<p>Untuk bisa clone dari github, pertama kali kita harus punya account Github. Silahkan <a href="https://github.com/plans">daftar dulu</a>.</p>

<p>Setelah punya account, login, dan kita akan melihat dashboard.</p>

<p><img src="/images/uploads/2011/01/01-github-dashboard-300x208.png" title="" ></p>

<p>Klik account setting, dan masuk ke menu SSH Public Keys</p>

<p><img src="/images/uploads/2011/01/02-github-add-pubkey-300x206.png" title="" ></p>

<p>Pastekan public key yang sudah kita export menggunakan PuttyGen di atas. Setelah diadd, public key kita akan terdaftar. Kita boleh pasang public key banyak-banyak, karena biasanya satu public key mencerminkan satu komputer. Bisa saja kita punya PC dan juga Laptop.
<img src="/images/uploads/2011/01/03-github-add-pubkey-completed-300x201.png" title="" ></p>

<p>Setelah public key didaftarkan, selanjutnya kita lihat repository yang kita punya.
<img src="/images/uploads/2011/01/04-github-repositories-300x183.png" title="" ></p>

<p>Kalau belum punya repository, Anda bisa fork <a href="https://github.com/endymuhardin/belajarGit">repository belajarGit punya saya</a>, sehingga nanti Anda punya repo belajarGit sendiri.</p>

<p>Setiap repository punya URL untuk melakukan clone. Copy paste URL clone repository.
<img src="/images/uploads/2011/01/05-github-repo-belajarGit-300x208.png" title="" ></p>

<p>Untuk melakukan clone, buka Windows Explorer, klik kanan, dan pilih Git Clone.
<img src="/images/uploads/2011/01/03-tortoisegit-use-clone-300x208.png" title="" ></p>

<p>Masukkan URL yang tadi kita copy dari Github, dan load private key yang kita buat dengan PuttyGen.</p>

<p><img src="/images/uploads/2011/01/04-tortoisegit-clone-info-300x200.png" title="" ></p>

<p>Putty akan melakukan komunikasi dengan Github. Kalau kita belum pernah clone dari Github sebelumnya, Putty akan menanyakan apakah kita ingin menerima koneksi dari Github. Jawab saja Yes.
<img src="/images/uploads/2011/01/05-tortoisegit-clone-save-host-key-300x210.png" title="" ></p>

<p>Setelah kita jawab Yes, TortoiseGit akan mendownload repository dari Github untuk kita pakai di local, yang lebih dikenal dengan istilah clone. Ini ditunjukkan dengan progress bar kura-kura salto. Jumlah kura-kura yang salto tergantung dari ukuran repository kita. Semakin besar repositorynya, semakin banyak kura-kura yang salto. Bersabarlah, dan tunggu sampai semua kura-kura selesai melakukan aksinya.</p>

<p><img src="/images/uploads/2011/01/06-tortoisegit-clone-complete-300x211.png" title="" ></p>

<p>Sekarang repository sudah ada di local, dan siap digunakan. Bagaimana cara menggunakannya, stay tuned. Akan dibahas di posting berikutnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrasi Subversion ke Git]]></title>
    <link href="http://endy.artivisi.com/blog/aplikasi/lain/migrasi-subversion-ke-git/"/>
    <updated>2011-01-03T06:02:23+07:00</updated>
    <id>http://endy.artivisi.com/blog/aplikasi/lain/migrasi-subversion-ke-git</id>
    <content type="html"><![CDATA[<p>Di tahun yang baru ini, kami di ArtiVisi juga beralih menggunakan version control baru, yaitu Git.
Menggantikan Subversion yang sudah kita gunakan sejak 2008.</p>

<p>Ada banyak keunggulan Git dibandingkan Subversion, diantaranya:</p>

<ul>
<li><p>offline operation. Git adalah distributed/decentralized version control system (DVCS), artinya tidak membutuhkan server terpusat untuk bisa bekerja. Keunggulan ini berakibat pada keunggulan berikutnya, yaitu:</p></li>
<li><p>commit sesuai task, bukan sesuai koneksi internet. Dulu, karena koneksi internet terbatas, programmer commit hanya pada saat ada internet. Akibatnya satu commit berisi perubahan untuk banyak task, tercampur aduk tidak jelas peruntukannya. DVCS memungkinkan programmer untuk commit walaupun tidak ada koneksi internet, dan melakukan sinkronisasi pada saat offline.</p></li>
<li><p>fitur staging area di Git, memungkinkan kita untuk mengatur isi commit secara detail.</p></li>
<li><p>fitur rebase untuk mengatur commit. Commit yang teratur akan memudahkan review.</p></li>
<li><p>branch dan merge yang lebih baik daripada subversion. Karena branch dan merge mudah, maka kita bisa menerapkan berbagai teknik workflow dalam mengelola development.</p></li>
<li><p>website social coding. Github dan Gitorious merupakan Facebook-nya para programmer. Untuk bisa terlibat di dalamnya, terlebih dulu kita harus bisa Git.</p></li>
</ul>


<p>Selain Git, ada juga DVCS lain seperti Mercurial (hg), Bazaar (bzr), dsb. Git dipilih karena :</p>

<ul>
<li><p>popularitas. Semakin populer, tutorial dan aplikasi pendukung semakin banyak, sehingga semakin nyaman digunakan. Saat ini yang paling populer cuma dua, yaitu git dan hg.</p></li>
<li><p>local/named branch. Ini fitur penting, tapi entah kenapa tidak ada di core hg. Sepertinya ada di extension, tapi yang jelas merupakan workaround dan bukan didesain sejak awal. Tanpa named branch, pilihan workflow menjadi terbatas.</p></li>
<li><p>Social coding Git (Github dan Gitorious) jauh lebih superior daripada Mercurial (Bitbucket)</p></li>
</ul>


<p>Beberapa faktor di atas adalah alasan kenapa Git yang dipilih.</p>

<p>Baiklah, sekarang saatnya migrasi. Kita akan mengkonversi repository Subversion menjadi repository Git.
Berikut langkah-langkah yang akan kita lakukan:</p>

<ol>
<li><p>Dump repository Subversion</p></li>
<li><p>Restore lagi di laptop supaya cepat</p></li>
<li><p>Buat authorsfile</p></li>
<li><p>Buat ignore file</p></li>
<li><p>Clone tanpa metadata</p></li>
<li><p>Konversi branch</p></li>
<li><p>Konversi tags</p></li>
<li><p>Clone hasil konversi menjadi bare repository</p></li>
</ol>


<h2>Dump repository Subversion</h2>

<p>Seperti biasa, sebelum melakukan apapun, lakukan backup dulu. Just in case.
Perintahnya gampang.</p>

<pre><code>svnadmin dump /path/ke/repository | bzip2 -c9 &gt; dump-repository-yyyyMMdd.dmp.bz2
</code></pre>

<h2>Restore lagi di laptop/PC supaya cepat</h2>

<p>Langkah ini optional, kalau kita ingin melakukannya di komputer kita sendiri, bukan di server.
Tapi sebaiknya dilakukan, karena nanti kita akan checkout beberapa kali yang pasti membutuhkan waktu lama jika dilakukan ke server.</p>

<p>Perintah restore gampang.</p>

<pre><code>bzcat dump-repository-yyyyMMdd.dmp.bz2 | svnadmin load /path/ke/repo/svn/di/lokal
</code></pre>

<h2>Buat authorsfile</h2>

<p>Setelah kita memiliki repository Subversion, kita perlu mengambil daftar nama orang-orang yang pernah commit. Ini akan kita butuhkan pada waktu konversi. Nama committer ini diambil dari hasil checkout Subversion. Jadi mari kita checkout dulu.</p>

<pre><code>svn checkout file:///path/ke/repo/svn/di/lokal checkout-project-svn
</code></pre>

<p>Karena lokal, harusnya hanya membutuhkan beberapa menit saja.</p>

<p>Setelah dilakukan checkout, kita membutuhkan script untuk mengambil nama committer. Berikut isi scriptnya, simpan saja dengan nama extract-svn-authors.sh</p>

<pre><code>#!/usr/bin/env bash
authors=$(svn log -q | grep -e '^r' | awk 'BEGIN { FS = "|" } ; { print $2 }' | sort | uniq)
for author in ${authors}; do
  echo "${author} = NAME &lt;USER@DOMAIN&gt;";
done
</code></pre>

<p>Jalankan script tersebut di dalam folder hasil checkout.</p>

<pre><code>cd checkout-project-svn
sh /path/ke/script/extract-svn-authors.sh &gt; nama-committers.txt 
</code></pre>

<p>Ini akan menghasilkan file nama-committers.txt yang berisi nama committer seperti ini :</p>

<pre><code>endy = NAME &lt;USER@DOMAIN&gt;
</code></pre>

<p>Editlah file ini supaya mencerminkan nama dan email yang benar, seperti ini :</p>

<pre><code>endy = Endy Muhardin &lt;endy.muhardin@geemail.com&gt;
</code></pre>

<h2>Buat ignore file</h2>

<p>Dalam mengerjakan project, ada file-file yang ada di folder kerja, tapi tidak kita masukkan ke repository. Misalnya file hasil kompilasi, setting IDE, dan sebagainya. File dan folder hasil generate ini biasanya kita daftarkan di ignore list, supaya tidak ikut dicommit ke repository. Kita perlu mengkonversi format ignore di Subversion (svn property ignore) menjadi format ignore versi Git (yaitu file .gitignore).</p>

<p>Untuk membuatnya, kita clone dulu repository Subversion menjadi repository Git. Ini dilakukan di folder yang berbeda dengan hasil checkout Subversion di langkah sebelumnya.</p>

<pre><code>cd .. 
git svn clone --stdlayout -A nama-committers.txt file:///path/ke/repo git-svn-migrasi-project-dengan-metadata
</code></pre>

<p>Setelah diclone, konversi ignore list nya.</p>

<pre><code>cd git-svn-migrasi-project-dengan-metadata
git svn show-ignore &gt; .gitignore
</code></pre>

<h2>Clone tanpa metadata</h2>

<p>Selanjutnya, kita lakukan clone lagi. Kali ini tanpa menyertakan metadata, sehingga hasilnya bersih. Metadata ini digunakan bila kita ingin tetap commit ke repository Subversion, tapi ingin menggunakan Git sebagai frontend.</p>

<p>Perintahnya mirip seperti sebelumnya, kali ini kita tambahkan opsi tanpa metadata.</p>

<pre><code>cd .. 
git svn clone --no-metadata --stdlayout -A nama-committers.txt file:///path/ke/repo git-svn-migrasi-project-tanpa-metadata
</code></pre>

<p>Ini akan menghasilkan folder git-svn-migrasi-project-tanpa-metadata berisi repository Subversion yang sudah dikonversi menjadi repository Git. Semua langkah selanjutnya akan dilakukan di dalam folder ini.</p>

<p>Setelah selesai, kita masukkan file .gitignore ke repo Git yang baru ini.</p>

<pre><code>cd git-svn-migrasi-project-tanpa-metadata
cp ../git-svn-migrasi-project-dengan-metadata/.gitignore ./
git add . 
git commit -m "add ignore list"
</code></pre>

<h2>Konversi branch</h2>

<p>Branch yang ada di Subversion harus kita konversi menjadi branch di Git.
Berikut perintahnya.</p>

<pre><code>git branch -r | grep -v tags | sed -rne 's, *([^@]+)$,\1,p' | while read branch; do echo "git branch $branch $branch"; done | sh
</code></pre>

<p>Verifikasi hasilnya dengan perintah ini.</p>

<pre><code>git branch -a
</code></pre>

<p>Seharusnya semua branch yang ada di repository Subversion akan terlihat di dalam repository Git ini.</p>

<h2>Konversi tags</h2>

<p>Lakukan perintah berikut untuk mengkonversi tag Subversion menjadi tag Git.</p>

<pre><code>git branch -r | sed -rne 's, *tags/([^@]+)$,\1,p' | while read tag; do echo "git tag $tag 'tags/${tag}^'; git branch -r -d tags/$tag"; done | sh
</code></pre>

<p>Verifikasi dengan perintah ini</p>

<pre><code>git tag -l
</code></pre>

<p>Pastikan semua tag yang tadinya ada di repository Subversion sudah terdaftar di repository Git.</p>

<h2>Clone hasil konversi menjadi bare repository</h2>

<p>Setelah nama committer, ignore list, branch, dan tags berhasil kita pindahkan, inilah langkah terakhir. Kita clone sekali lagi menjadi repository bare supaya bisa dishare dengan orang lain. Biasanya repository bare ini kita publish dengan Gitosis, gitweb, atau aplikasi server lainnya.</p>

<p>Perintah ini dilakukan di luar repository Git yang kita gunakan pada langkah sebelumnya.</p>

<pre><code>cd .. 
git clone --bare git-svn-migrasi-project-tanpa-metadata nama-project.git
</code></pre>

<p>Ini akan menghasilkan satu folder dengan nama nama-project.git berisi repository Git yang siap dishare.</p>

<p>Demikian posting tahun baru. Semoga kita semua lebih sukses di tahun 2011 ini.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup MySQL]]></title>
    <link href="http://endy.artivisi.com/blog/lain/backup-mysql/"/>
    <updated>2009-06-02T15:23:43+07:00</updated>
    <id>http://endy.artivisi.com/blog/lain/backup-mysql</id>
    <content type="html"><![CDATA[<p>Sebelumnya, saya telah membahas script backup untuk <a href="http://endy.artivisi.com/blog/lain/backup-trac/">Trac</a> maupun <a href="http://endy.artivisi.com/blog/aplikasi/svn-parentpath-backup/">Subversion</a>. Kali ini, kita akan bahas backup script untuk MySQL.</p>

<p>Sama seperti backup script sebelumnya, script ini akan membuat folder sesuai dengan tanggal dan jam backup. Selanjutnya, script akan melakukan backup terhadap database MySQL sesuai dengan nama database yang ditentukan. Backup ini akan disimpan di folder yang kita tentukan.</p>

<p>Berikut backup scriptnya.</p>

<p>[Update - 7 Des 2009] Sudah ditambahkan perintah untuk kompresi hasil backupnya.</p>

<pre><code>#!/bin/sh

test -x /bin/date || exit -1
test -x /usr/bin/mysqldump || exit -1
test -x /bin/tar || exit -1
test -x /bin/bzip2 || exit -1

DBHOST=$1
DBNAME=$2
USERNAME=$3
PASSWORD=$4
BACKUP_FOLDER=$5
CURR_DATE="$(/bin/date +%Y%m%d-%H%M)"


if [ "$1" = '' ]; then
    echo "Usage : $0 &lt;db name&gt; &lt;username&gt; &lt;password&gt; &lt;backup folder&gt;"
    return 1
fi

if [ "$2" = '' ]; then
    echo "Usage : $0 &lt;db name&gt; &lt;username&gt; &lt;password&gt; &lt;backup folder&gt;"
    return 1
fi

if [ "$3" = '' ]; then
    echo "Usage : $0 &lt;db name&gt; &lt;username&gt; &lt;password&gt; &lt;backup folder&gt;"
    return 1
fi

if [ "$4" = '' ]; then
    echo "Usage : $0 &lt;db name&gt; &lt;username&gt; &lt;password&gt; &lt;backup folder&gt;"
    return 1
fi


echo "Create backup folder $BACKUP_FOLDER/$CURR_DATE"
echo "..."

/bin/mkdir "$BACKUP_FOLDER/$CURR_DATE"

echo "Backup $DBNAME schema to $BACKUP_FOLDER/$CURR_DATE/$DBNAME-schema-$CURR_DATE.sql"
echo "..."

/usr/bin/mysqldump $DBNAME -u $USERNAME -p$PASSWORD -h$DBHOST -d &gt; "$BACKUP_FOLDER/$CURR_DATE/$DBNAME-schema-$CURR_DATE.sql"

echo "Backup $DBNAME data to $BACKUP_FOLDER/$CURR_DATE/$DBNAME-data-$CURR_DATE.sql"
echo "..."

/usr/bin/mysqldump $DBNAME -u $USERNAME -p$PASSWORD -h $DBHOST -n -c -t --single-transaction &gt; "$BACKUP_FOLDER/$CURR_DATE/$DBNAME-data-$CURR_DATE.sql"

echo "Compressing folder $CURR_DATE"
echo "..."

/bin/tar cvf - "$BACKUP_FOLDER/$CURR_DATE" | /bin/bzip2 -c9 &gt; "$BACKUP_FOLDER/$CURR_DATE.tar.bz2"

echo "Removing folder $BACKUP_FOLDER/$CURR_DATE"
echo "..."

/bin/rm -rf "$BACKUP_FOLDER/$CURR_DATE"

echo "Completed"
</code></pre>

<p>Script di atas dapat dijalankan setiap Jumat malam jam 23.00 dengan konfigurasi sebagai berikut.</p>

<pre><code>0 23 * * 5 /bin/sh /path/ke/mysql-backup.sh db_user db_pass db_name backup_folder_mysql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro jQuery]]></title>
    <link href="http://endy.artivisi.com/blog/lain/intro-jquery/"/>
    <updated>2009-03-17T22:38:56+07:00</updated>
    <id>http://endy.artivisi.com/blog/lain/intro-jquery</id>
    <content type="html"><![CDATA[<p>Jaman sekarang, membuat tampilan menarik di aplikasi web sudah tidak sulit lagi.
Banyak pustaka JavaScript yang siap digunakan dengan mudah.
Tidak perlu lagi kita memusingkan keragaman browser dengan keanehannya masing-masing.</p>

<p>Salah satu pustaka JavaScript yang populer adalah <a href="http://www.jquery.com">jQuery</a>.
Berbeda dengan pustaka JavaScript lainnya, jQuery tidak menawarkan komponen UI yang aneh-aneh.
Demikian juga dengan efek visual, hanya tersedia sekenanya saja.
Dengan demikian, jQuery berukuran relatif kecil dan mudah dipelajari.</p>

<p>Akan tetapi, di balik kesederhanaan tersebut tersimpan kecanggihan arsitekturnya.
Dengan arsitektur yang rapi ini, orang mudah membuat plugin untuk menambah kemampuan jQuery.
Hasilnya, ada <a href="http://www.jqueryui.com/">jQuery UI</a> dengan koleksi komponen UI yang kaya.
Ada juga <a href="http://www.trirand.com/blog/">jqGrid</a> dengan komponen tabelnya yang canggih.</p>

<p>Pada tutorial ini, kita akan mempelajari dasar-dasar pemrograman JavaScript menggunakan jQuery.
Setelah menguasai dasar-dasarnya,
kita akan mampu menggunakan berbagai teknik tingkat tinggi seperti AJAX dan efek visual.
Kita juga akan mudah mempelajari dan menggunakan berbagai komponen dan plugin yang tersedia.</p>

<p>Pada intinya, penggunaan jQuery terdiri dari dua langkah sederhana :
1. Mendapatkan elemen HTML yang ingin kita gunakan
2. Menambahkan behavior pada elemen HTML yang sudah didapatkan.</p>

<p>Sebagai contoh kasus, kita akan membuat kalkulator sederhana yang tampilannya seperti ini:
(/images/uploads/2009/03/kalkulator-jquery.png)</p>

<p>Berikut adalah kode HTML untuk membuat kalkulator tersebut.</p>

<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Kalkulator jQuery&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Kalkulator jQuery&lt;/h1&gt;

    &lt;input name="num1"&gt; * &lt;input name="num2"&gt;
    &lt;input type="button" id="hitung" value="="&gt;
    &lt;input name="hasil" disabled="true"&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Dari screenshot di atas kita sudah bisa menebak cara kerja halaman web tersebut.
Bila tombol = ditekan, maka nilai yang ada di input num1 dan num2 akan dibaca dan dikalikan.
Kemudian hasilnya akan ditampilkan di input hasil.</p>

<p>jQuery menganjurkan kita untuk mengikuti prinsip <em>unobtrusive javascript</em>,
yang artinya tidak menambahkan event pada kode HTML.</p>

<p>Bila kita tidak mengikuti prinsip ini, biasanya kita akan langsung menambahkan event di tombol = seperti ini</p>

<pre><code>&lt;input type="button" id="hitung" value="=" onclick="alert('Hello World');"&gt;
</code></pre>

<p>Dengan prinsip <em>unobtrusive javascript</em>, kode HTML untuk tampilan dibiarkan apa adanya.
Event onclick akan kita tambahkan di kode JavaScript yang bisa dipasang di blok head secara inline (ditulis langsung),
ataupun dikeluarkan ke file tersendiri.</p>

<p>Pada contoh ini, kita akan menulis inline supaya lebih mudah.</p>

<h2>Instalasi jQuery</h2>

<p>Sebelum kita melakukan apa-apa, terlebih dulu halaman kalkulator tersebut harus bisa mengakses jQuery.
Tambahkan baris berikut pada blok head.</p>

<pre><code>&lt;script type="text/javascript" src="js/jquery-1.2.6.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>Pastikan lokasi file jQuery.js sudah benar.</p>

<p>Setelah itu, biasanya kita akan menambahkan kode program JavaScript yang akan dijalankan <strong>setelah</strong> seluruh halaman selesai diload oleh browser. Tentunya kita tidak ingin menambahkan event pada elemen yang belum selesai diload.</p>

<p>Berikut adalah blok standar untuk meletakkan kode JavaScript kita.</p>

<pre><code>&lt;script type="text/javascript"&gt;
    $(function(){

    });
&lt;/script&gt;
</code></pre>

<h2>Event onclick</h2>

<p>Langkah pertama yang kita lakukan adalah menambahkan event ke tombol =.
Agar bisa melakukannya, kita harus mendapatkan tombol tersebut.
Kalau kita perhatikan kode HTML di atas, tombol = memiliki ID yang berisi nilai hitung.
Atribut ID harus unik dalam satu halaman HTML.
Dengan demikian, kita bisa langsung mendapatkan tombol = dengan menggunakan IDnya.
Setelah tombol didapatkan, kita bisa langsung menggunakan function click untuk menambahkan event onclick.
Berikut adalah kode programnya.</p>

<pre><code>&lt;script type="text/javascript"&gt;
    $(function(){
        $("#hitung").click();
    });
&lt;/script&gt;
</code></pre>

<p>Dalam JavaScript, kita bisa memasukkan function sebagai parameter dalam function lain.
Bagi mereka yang sudah pernah coding C atau C++, pasti sudah tidak asing dengan teknik ini,
biasa disebut function pointer dalam C atau C++.</p>

<p>Nah, mari kita isikan function sebagai parameter untuk function click, seperti ini :</p>

<pre><code>&lt;script type="text/javascript"&gt;
    $(function(){
        $("#hitung").click(function(){

        });
    });
&lt;/script&gt;
</code></pre>

<p>Selanjutnya, kita tinggal mengimplementasikan logika kode program kita, yaitu :
1. ambil nilai num1
2. ambil nilai num2
3. kalikan num1 dan num2
4. hasilnya isikan ke input text hasil</p>

<h2>Selector name</h2>

<p>Fitur jQuery untuk menunjuk elemen HTML tertentu disebut selector.
Pada penambahan event onclick di atas, kita sudah menggunakan selector berdasarkan ID.
Sekarang, kita akan menggunakan selector atribut untuk memilih input dengan atribut name berisi num1, num2, dan hasil.
Berikut kode program implementasi dari logika di atas.</p>

<pre><code>&lt;script type="text/javascript"&gt;
    $(function(){
        $("#hitung").click(function(){
            var num1 = $("input[name=num1]").val();
            var num2 = $("input[name=num2]").val();
            $("input[name=hasil]").val(num1 * num2);
        });
    });
&lt;/script&gt;
</code></pre>

<h2>Kesimpulan</h2>

<p>Silahkan buka kalkulator.html di browser, dan coba apakah sudah bekerja dengan benar.</p>

<p>Secara garis besar, pemakaian jQuery dapat dijelaskan dengan satu kalimat,</p>

<blockquote><p>pilih elemen menggunakan selector, lalu manipulasi sesuai keinginan</p></blockquote>

<p>Setelah memahami artikel ini, kita bisa mengembangkan kemampuan kita dalam menggunakan jQuery, diantaranya:</p>

<ul>
<li><p>mempelajari berbagai selector selain id dan atribut. jQuery memiliki banyak sekali selector yang bisa digunakan</p></li>
<li><p>menggunakan berbagai event lain selain onclick, misalnya onfocus, onchange, dsb</p></li>
<li><p>operasi elemen selain mengeset value, misalnya menambahkan isi elemen, mengakses server dengan AJAX, dsb</p></li>
<li><p>menggunakan plugin-plugin jQuery misalnya Date Picker, Tab, jqGrid, dan sebagainya</p></li>
<li><p>membuat plugin sendiri</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Device menghilang di VMWare]]></title>
    <link href="http://endy.artivisi.com/blog/lain/linux/vmware-eth/"/>
    <updated>2009-03-03T15:04:24+07:00</updated>
    <id>http://endy.artivisi.com/blog/lain/linux/vmware-eth</id>
    <content type="html"><![CDATA[<p>Saya menggunakan VMWare secara intensif dalam proses development.
Salah satu penggunaannya adalah untuk menginstal aplikasi atau database milik client. Beberapa merek database seperti Oracle relatif invasif terhadap sistem, misalnya mendikte jumlah swap ataupun mengharuskan mengedit kernel parameter. Tentunya ini membuat kotor sistem operasi saya.</p>

<p>Selain itu, kadangkala client menggunakan sistem operasi yang berbeda dengan yang saya gunakan. Ini juga dapat diselesaikan dengan menggunakan VMWare.</p>

<p>Saya menyimpan file-file VM di harddisk eksternal, untuk meningkatkan performance. Menurut <a href="http://www.codinghorror.com">Jeff Atwood</a>, kinerja VM akan meningkat bila dia berada di harddisk yang berbeda dengan hostnya.</p>

<p>Penyimpanan di harddisk eksternal ini ternyata mengundang sedikit masalah. Kadangkala network interface VM saya menghilang. Masalah ini terjadi pada kombinasi host Ubuntu dan guest Ubuntu.</p>

<p>Setelah googling kesana kemari, ternyata ini disebabkan oleh beberapa hal :</p>

<ol>
<li><p>Ubuntu me-mount partisi harddisk eksternal secara acak. Kadang partisi 1 dimount ke /media/disk-1, kadang ke /media-disk-2</p></li>
<li><p>Bila posisi mount berubah, VMWare akan menggenerate UUID (ID unik untuk guest VM) baru</p></li>
<li><p>Setiap kali UUID berubah, MAC Address network interface guest VM juga berubah.</p></li>
<li><p>Ubuntu di guest VM meng-cache MAC address, sehingga kalau MAC yang dia cache tidak ada, network interface tersebut tidak akan diload</p></li>
</ol>


<p>Solusinya mudah, yaitu menghapus cache MAC address di guest Ubuntu, dan merestartnya. Caranya, login ke guest OS, lalu hapus file /etc/udev/rules.d/70-persistent-net.rules. Setelah itu restart.</p>

<pre><code>sudo rm /etc/udev/rules.d/70-persistent-net.rules
sudo reboot
</code></pre>

<p>Setelah restart, guest VM akan kembali memiliki ethernet card.</p>
]]></content>
  </entry>
  
</feed>
