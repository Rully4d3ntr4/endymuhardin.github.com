<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/java/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-05-27T17:16:49+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Konfigurasi Koneksi Database dengan Spring]]></title>
    <link href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/"/>
    <updated>2013-05-27T17:02:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring</id>
    <content type="html"><![CDATA[<h1>Pengantar</h1>

<p>Di Java, ada banyak cara untuk mengakses database, diantaranya:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/jdbc/">JDBC polos tanpa framework apapun</a></li>
<li><a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html">JDBC dengan Spring (Spring JDBC)</a></li>
<li>JDBC dengan <a href="http://blog.mybatis.org/">iBatis/MyBatis</a></li>
<li><a href="http://docs.jboss.org/hibernate/orm/4.2/manual/en-US/html/">Hibernate</a></li>
<li><a href="http://www.datanucleus.org/products/datanucleus/jdo/guides/tutorial_rdbms.html">JDO</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html">JPA</a></li>
<li><a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a></li>
</ul>


<p>Masing-masing memiliki kelebihan dan kekurangan masing-masing yang tidak akan kita bahas di artikel ini.
Kali ini kita hanya akan membahas metode Spring JDBC dan perbandingannya dengan JDBC murni.</p>

<p>Artikel ini merupakan bagian pertama dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li>Konfigurasi koneksi database (artikel ini)</li>
<li>Insert, update, dan delete data</li>
<li>Mengambil data (query)</li>
</ol>


<p>Keseluruhan kode program dapat dilihat di <a href="https://github.com/endymuhardin/belajar-akses-database-java">repository belajar-akses-database-java di Github saya</a>, khususnya <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc">branch spring-jdbc</a>.</p>

<!--more-->


<h2>Perbandingan JDBC polos dan Spring JDBC</h2>

<p>Menggunakan JDBC polos tanpa library memang mudah, karena tidak perlu pusing mempelajari library lain. Tapi ada beberapa keterbatasan dan kesulitan, diantaranya:</p>

<ul>
<li>semua method throws Exception, sehingga kode program kita menjadi kotor dengan try-catch</li>
<li>tidak ada manajemen koneksi database, kita harus buka-tutup sendiri</li>
<li>tidak ada declarative transaction, kita harus secara manual melakukan begin-commit/rollback</li>
</ul>


<p>Dengan berbagai keterbatasan tersebut, ada baiknya kita menggunakan bantuan Spring Framework, yaitu modul <code>spring-jdbc</code> untuk memudahkan berbagai kegiatan di atas. Tentunya masih banyak hal yang harus kita lakukan sendiri, tidak seperti penggunaan library Object Relational Mapping (ORM) seperti Hibernate atau JPA, di antaranya:</p>

<ul>
<li>mapping dari result set menjadi Java object</li>
<li>mapping dari Java object menjadi isi parameter PreparedStatement</li>
<li>cache</li>
<li>cascading operation</li>
<li>generate primary key secara otomatis</li>
<li>dsb</li>
</ul>


<p>Ada beberapa tahapan dalam menggunakan Spring JDBC, yaitu :</p>

<ol>
<li>Konfigurasi Koneksi Database</li>
<li>Membuat class Data Access Object (DAO)</li>
<li>Membuat class implementasi business process/service</li>
<li>Membuat test otomatis menggunakan JUnit</li>
</ol>


<h1>Studi Kasus</h1>

<p>Agar lebih konkrit, kita akan menggunakan skema database yang umum digunakan di aplikasi bisnis,
yaitu memiliki tabel :</p>

<ul>
<li>Master Data / Referensi</li>
<li>Header Transaksi</li>
<li>Detail Transaksi</li>
</ul>


<p>Berikut adalah skema database yang akan kita gunakan:</p>

<p>```sql
create table m_produk (</p>

<pre><code>id int primary key auto_increment,
kode varchar(20) not null,
nama varchar(255) not null,
harga decimal(19,2) not null
</code></pre>

<p>) engine=InnoDB ;</p>

<p>create table t_penjualan (</p>

<pre><code>id int primary key auto_increment,
waktu_transaksi datetime not null
</code></pre>

<p>) engine=InnoDB AUTO_INCREMENT=100;</p>

<p>create table t_penjualan_detail (</p>

<pre><code>id int primary key auto_increment,
id_penjualan int not null,
id_produk int not null,
harga decimal(19,2) not null,
jumlah int not null, 
foreign key(id_penjualan) references t_penjualan(id) on delete cascade,
foreign key(id_produk) references m_produk(id) on delete restrict
</code></pre>

<p>) engine=InnoDB AUTO_INCREMENT=100;
```</p>

<p>Untuk keperluan test, jangan lupa kita sertakan beberapa baris data.</p>

<p>```sql
insert into m_produk (id,kode,nama,harga) values
(1, 'K-001', 'Keyboard USB', 150000),
(2, 'M-001', 'Mouse USB', 50000),
(3, 'L-001', 'Laptop', 10000000);</p>

<p>insert into t_penjualan (id,waktu_transaksi) values
(1,'2013-01-01 20:30:30'),
(2,'2013-01-02 15:15:15'),
(3,'2013-02-02 09:09:09');</p>

<p>insert into t_penjualan_detail (id,id_penjualan, id_produk, harga, jumlah) values
(1,1,1,150000,2),
(2,1,2,50000,5),
(3,2,1,150000,3),
(4,2,2,50000,3),
(5,3,3,10000000,1);
```</p>

<p>Tabel dan data di atas kita masukkan ke database dengan rincian sebagai berikut:</p>

<ul>
<li>Jenis Database : MySQL</li>
<li>Server Database : localhost</li>
<li>Nama Database : belajar</li>
<li>Username Database : root</li>
<li>Password Database : admin</li>
</ul>


<p>Selanjutnya kita akan mengkonfigurasi Spring supaya bisa terkoneksi dengan database tersebut.</p>

<h1>Konfigurasi Koneksi Database</h1>

<h2>Dependensi</h2>

<p>Kita membutuhkan beberapa library, dinyatakan dalam dependensi Maven sebagai berikut:</p>

<h3>Driver database MySQL</h3>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;mysql&lt;/groupId&gt;
&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;version&gt;${mysql.version}&lt;/version&gt;
&lt;scope&gt;runtime&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<h3>Library manajemen koneksi database (database connection pooling)</h3>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;
&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;
&lt;version&gt;${commons-dbcp.version}&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<h3>Spring JDBC</h3>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-context&lt;/artifactId&gt;
&lt;version&gt;${org.springframework.version}&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
&lt;version&gt;${org.springframework.version}&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-test&lt;/artifactId&gt;
&lt;version&gt;${org.springframework.version}&lt;/version&gt;
&lt;scope&gt;test&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>Selanjutnya, kita membuat konfigurasi database untuk Spring. Kita beri nama saja file konfigurasinya <code>spring-jdbc-ctx.xml</code>
dan kita letakkan di folder <code>src/main/resources</code>. File ini berisi :</p>

<ul>
<li>konfigurasi data source untuk koneksi ke database. Kita menggunakan pustaka <code>commons-dbcp</code> untuk menangani connection pooling ke database.</li>
<li>transaction manager. Ini dibutuhkan supaya kita tidak perlu lagi membuat coding untuk rangkaian <code>begin-commit/rollback</code>.</li>
<li>component scan. Ini dibutuhkan agar object DAO dan Service kita otomatis dideteksi dan diinisialisasi oleh Spring</li>
</ul>


<h2>Koneksi Database</h2>

<p>Berikut konfigurasi koneksi database</p>

<p>```xml
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"></p>

<pre><code>&lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
&lt;property name="url" value="jdbc:mysql://localhost/belajar" /&gt;
&lt;property name="username" value="root" /&gt;
&lt;property name="password" value="admin" /&gt;
&lt;property name="maxActive" value="80" /&gt;
&lt;property name="maxWait" value="40000" /&gt;
&lt;property name="maxIdle" value="20" /&gt;
</code></pre>

<p></bean>
```</p>

<p>Penjelasannya sebagai berikut:</p>

<h3>Database Connection Pooling</h3>

<p>Koneksi ke database sebetulnya merupakan operasi yang <em>mahal</em>. Kenapa <em>mahal</em>?
Karena setiap kali kita membuat koneksi, ada serangkaian kegiatan yang harus dilakukan oleh database server seperti:</p>

<ul>
<li>memeriksa username dan password</li>
<li>memeriksa apakah komputer kita (dilihat dari alamat IP atau nama host) diijinkan untuk masuk</li>
<li>memeriksa apakah database, tabel, dan tindakan yang kita lakukan memiliki ijin akses yang mencukupi</li>
</ul>


<p>Oleh karena itu, idealnya koneksi database dibuat sekali saja dan digunakan terus sepanjang aplikasi berjalan.
Tentunya kalau koneksi database hanya satu, setiap request dari user akan mengantri.
Untuk itu kita buat banyak koneksi sekaligus yang nantinya akan <em>dipinjamkan</em> pada request yang membutuhkan.
Teknik ini disebut dengan istilah database connection pooling.</p>

<p>Library yang kita gunakan untuk itu adalah <a href="http://commons.apache.org/proper/commons-dbcp/configuration.html">Apache Commons DBCP</a>, yang ditandai dengan penggunaan class <code>org.apache.commons.dbcp.BasicDataSource</code> di atas.</p>

<p>Ada banyak hal yang bisa disetting, tapi kita akan fokus ke beberapa saja yaitu:</p>

<ul>
<li><code>driverClassName</code> : nama class untuk koneksi ke database. Ini harus sesuai dengan merek dan versi database yang digunakan</li>
<li><code>url</code> : informasi koneksi database. Biasanya berisi alamat server (IP atau Hostname) dan nama database</li>
<li><code>username</code> : username untuk connect ke database</li>
<li><code>password</code> : passwordnya user tersebut</li>
</ul>


<p>Keempat informasi di atas adalah informasi umum yang kita butuhkan apapun metode koneksi database yang kita gunakan, tidak terkait dengan penggunaan Apache Commons DBCP. Konfigurasi berikut barulah berkaitan dengan Apache Commons DBCP:</p>

<ul>
<li><p><code>maxActive</code> : jumlah koneksi yang boleh aktif secara berbarengan. Ini harus disetting dibawah angka yang kita ijinkan di database server. Misalnya di MySQL kita ijinkan 100 koneksi berbarengan, maka angkanya harus dibawah 100. Jangan juga dihabiskan 100, untuk berjaga-jaga siapa tahu kita butuh koneksi langsung ke MySQL tanpa lewat aplikasi (misalnya untuk keperluan debug). Pertimbangkan juga apabila ada aplikasi lain yang menggunakan database yang sama.</p></li>
<li><p><code>maxWait</code> : bila semua koneksi sebanyak <code>maxActive</code> sedang terpakai semua, request berikutnya akan menunggu salah satu selesai menggunakan koneksi. Nilai <code>maxWait</code> menentukan berapa milidetik request tersebut menunggu. Bila lebih dari <code>maxWait</code> dan belum juga kebagian koneksi, maka request tersebut akan mendapatkan <code>Exception</code>.</p></li>
<li><p><code>maxIdle</code> : ada kalanya aplikasi kita sedang sepi dari request user sehingga banyak koneksi database yang menganggur (idle). Angka <code>maxIdle</code> ini menentukan berapa koneksi yang akan tetap dipegang walaupun idle. Bila ada 20 koneksi idle, padahal <code>maxIdle</code> berisi 15, maka 5 koneksi akan ditutup. Ini merupakan trade-off. Bila terlalu banyak idle, maka memori database server akan terpakai untuk koneksi yang standby ini. Tapi bila terlalu sedikit, pada waktu aplikasi mendadak diserbu user, akan butuh waktu lama untuk dia membuatkan lagi koneksi baru.</p></li>
</ul>


<h2>Transaction Manager</h2>

<p>Setelah terhubung ke database, selanjutnya kita akan mengkonfigurasi transaction manager. Ini adalah fitur dari Spring Framework yang membebaskan kita dari coding manual untuk urusan transaction. Bila tidak menggunakan ini, maka kode program kita akan tampak seperti ini:</p>

<p>```java
public void simpan(Produk p){</p>

<pre><code>Connection conn; // inisialisasi koneksi di sini

try {
    conn.setAutocommit(false);

    String sql = "insert into m_produk ... ";
    conn.createStatement().executeUpdate(sql);

    conn.commit();

} catch (Exception err){
    conn.rollback();
} finally {
    conn.setAutocommit(true);
    conn.close();
}
</code></pre>

<p>}
```</p>

<p>Untuk dua baris perintah seperti di atas, kita harus menambahkan 8 baris hanya untuk mengurus transaction <strong>pada setiap method</strong>. Bayangkan kalau aplikasi kita punya 100 method, maka kode program untuk mengelola transaksi saja sudah 800 baris. Dengan fitur transaction manager, maka method di atas bisa ditulis ulang seperti ini:</p>

<p>```java
@Transactional
public void simpan(Produk p){</p>

<pre><code>String sql = "insert into m_produk ... ";
conn.createStatement().executeUpdate(sql);
</code></pre>

<p>}
```</p>

<p>Jauh lebih bersih dan rapi. Kode program jadi mudah dibaca dan akibatnya tentu memudahkan kita pada waktu bugfix, perubahan, ataupun penambahan fitur.</p>

<p>Nah ini dia konfigurasi transaction manager:</p>

<p>```xml
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"></p>

<pre><code>&lt;property name="dataSource" ref="dataSource"/&gt;
</code></pre>

<p></bean></p>

<p>&lt;tx:annotation-driven/>
```</p>

<p>Class transaction manager yang digunakan berbeda tergantung metode akses database yang digunakan dan juga bagaimana cara kita mendeploy aplikasi. Beberapa pilihan transaction manager yang lain antara lain:</p>

<ul>
<li><code>DataSourceTransactionManager</code> : digunakan untuk koneksi database menggunakan <code>javax.sql.DataSource</code>. Ini artinya koneksi langsung dari aplikasi ke database server.</li>
<li><code>JtaTransactionManager</code> : digunakan bila aplikasi kita dideploy di application server yang memiliki transaction manager sendiri (seperti Glassfish, JBoss, Websphere, Weblogic, dsb) <em>dan menggunakan</em> transaction manager yang disediakan tersebut. Bila kita deploy di Tomcat, hampir pasti kita tidak menggunakan JTA. Bila kita deploy ke Glassfish dan menggunakan konfigurasi <code>dataSource</code> Apache Commons DBCP, berarti kita juga tidak menggunakan JTA.</li>
<li><code>HibernateTransactionManager</code> : seperti ditunjukkan oleh namanya, gunakan ini bila kita menggunakan Hibernate</li>
<li><code>JpaTransactionManager</code> : ini juga sudah jelas dari namanya. Bila kita pakai JPA, gunakan transaction manager ini.</li>
</ul>


<p>Demikian tutorial cara konfigurasi koneksi database. Pada bagian selanjutnya, kita akan membuat kode program untuk menyimpan, mengubah, dan menghapus data dalam database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mendebug Aplikasi AJAX]]></title>
    <link href="http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax/"/>
    <updated>2013-05-22T16:46:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax</id>
    <content type="html"><![CDATA[<p>Di jaman modern ini, penggunaan AJAX sudah sangat mendunia, sehingga jarang sekali kita temui aplikasi yang tidak menggunakan AJAX. Demikian juga dengan template aplikasi standar yang digunakan di ArtiVisi, yaitu <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<p>Bagi yang baru mendengar atau sering dengar tapi belum paham, berikut penjelasan singkat mengenai AJAX.</p>

<ul>
<li>AJAX adalah salah satu teknik pemrograman web</li>
<li>AJAX bukanlah nama library atau framework, dia adalah cara membuat aplikasi</li>
<li><p>Pada aplikasi non-AJAX, siklusnya sebagai berikut :</p>

<ol>
<li>Ketik URL</li>
<li>Tampil HTML</li>
<li>Lakukan sesuatu (isi form + tekan submit)</li>
<li>Browser mengirim data</li>
<li>Server mengembalikan HTML full satu halaman</li>
</ol>
</li>
<li><p>Pada aplikasi AJAX, request ke server dilakukan oleh javascript, bukan oleh form submit.</p></li>
<li>Response dari server biasanya hanya berupa data dalam format XML atau JSON, bukan data + tampilan seperti HTML</li>
<li>Data yang dikirim server digunakan javascript hanya untuk mengubah sebagian halaman tampilan, bukan seluruh halaman seperti aplikasi non-AJAX.</li>
</ul>


<p>Karena perbedaan cara kerja aplikasi AJAX, maka cara debug errornya juga berbeda. Untuk mendebug aplikasi AJAX, kita perlu melengkapi browser yang kita gunakan supaya bisa memantau request dan response yang dilakukan aplikasi.</p>

<p>Pada artikel ini, kita akan membahas bagaimana cara mendebug aplikasi AJAX. Sebagai contoh kasus, kita akan gunakan aplikasi <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<!--more-->


<h2>Studi Kasus</h2>

<p>Sebagai contoh, kita akan mendebug form entri user berikut</p>

<p><img src="/images/uploads/2013/05/debug-ajax/01-screen-form-user.png" title="Form Entri User" ></p>

<p>dan tampilan daftar user berikut</p>

<p><img src="/images/uploads/2013/05/debug-ajax/02-screen-list-user.png" title="Daftar User" ></p>

<h2>Persenjataan</h2>

<p>Agar bisa mendebug aplikasi AJAX, browser kita harus bisa menampilkan lalu lintas request dan response. Bila menggunakan Firefox, instal plugin <a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/">Firebug</a>. Bila menggunakan Chrome, kemampuan ini sudah ada di menu Tools > Developer Tools sehingga kita tidak perlu menginstal apa-apa.</p>

<p>Setelah terinstal, pantau tab Network untuk melihat detail request dan response.</p>

<p>Berikut contohnya di Firebug</p>

<p><img src="/images/uploads/2013/05/debug-ajax/03-network-tab-firebug.png" title="Network Tab Firebug" ></p>

<p>Dan ini tampilannya di Chrome Developer Tools</p>

<p><img src="/images/uploads/2013/05/debug-ajax/04-network-tab-chrome.png" title="Network Tab Chrome Developer Tools" ></p>

<p>Seiring waktu, tab ini bisa penuh, kita bisa bersihkan menggunakan tombol Clear.</p>

<p><img src="/images/uploads/2013/05/debug-ajax/05-clear-log.png" title="Tombol Clear" ></p>

<p>Beberapa aplikasi AJAX yang mengikuti kaidah REST mengirim data ke server dalam format JSON dengan HTTP method yang sesuai fungsi seperti GET, POST, PUT, DELETE. Seringkali kita juga perlu memanipulasi HTTP request header dan melihat isi HTTP response header. Untuk itu, kita perlu menambah plugin lagi di browser.</p>

<p>Silahkan install <a href="https://addons.mozilla.org/En-us/firefox/addon/poster/">Poster</a> untuk Firefox, atau <a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn?hl=en">Rest Console</a> untuk Chrome.</p>

<h2>Mendebug Form Submit</h2>

<p>Di aplikasi Belajar RESTful, ketika kita mengisi form dan menekan tombol Simpan, prosesnya agak berbeda dengan aplikasi web tradisional.
Pada aplikasi ini, semua form data dikumpulkan dan dikonversi menjadi format JSON, dan kemudian dikirim dalam HTTP request body. Ini dilakukan menggunakan Javascript.</p>

<p>Di aplikasi web tradisional, data form ini disubmit dalam format HTTP request parameter dan tidak melibatkan Javascript sama sekali.</p>

<p>Karena ada proses konversi menjadi JSON ini, selama proses development kita ingin melihat dan memeriksa apakah nama variabel dan datanya sudah benar. Untuk itu kita bisa menggunakan Chrome Developer Tools, seperti bisa dilihat di screenshot berikut.</p>

<p><img src="/images/uploads/2013/05/debug-ajax/06-debug-siklus-cdt.png" title="Debug Request di Chrome Developer Tools" ></p>

<p>Screen debug di Firebug bentuknya seperti ini</p>

<p><img src="/images/uploads/2013/05/debug-ajax/09-debug-siklus-firebug.png" title="Debug Request di Firebug" ></p>

<p>Hal-hal yang perlu kita amati adalah :</p>

<ul>
<li><p>Request</p>

<ul>
<li>Request Method : GET, POST, PUT, atau DELETE</li>
<li>Request Header, terutama Accept dan Content-Type</li>
<li>Request Parameter</li>
<li>Data yang dikirim (bila ada)</li>
</ul>
</li>
<li><p>Response</p>

<ul>
<li>Response Status : Sukses (200, 201, 204) atau Gagal (4xx atau 5xx)</li>
<li>Response Header, terutama Content-Type dan Location</li>
<li>Response Data (bila ada)</li>
</ul>
</li>
</ul>


<p>Berikut adalah data-data tersebut di Chrome Developer Tools</p>

<p><img src="/images/uploads/2013/05/debug-ajax/07-detail-request-cdt.png" title="Detail Request Chrome Developer Tools" ></p>

<p><img src="/images/uploads/2013/05/debug-ajax/08-detail-response-cdt.png" title="Detail Response Chrome Developer Tools" ></p>

<p>Di Firebug, header dan data dipisahkan</p>

<p><img src="/images/uploads/2013/05/debug-ajax/10-detail-request-firebug.png" title="Tab Header" ></p>

<p>Request data ditampilkan di tab terpisah</p>

<p><img src="/images/uploads/2013/05/debug-ajax/11-detail-post-data-firebug.png" title="Tab Request Data" ></p>

<p>Pada waktu membaca data response, kita bisa melihat data aslinya</p>

<p><img src="/images/uploads/2013/05/debug-ajax/12-detail-response-firebug.png" title="Detail Response Firebug" ></p>

<p>dan bisa juga melihat yang sudah diformat dengan rapi</p>

<p><img src="/images/uploads/2013/05/debug-ajax/13-detail-json-firebug.png" title="Detail JSON Firebug" ></p>

<h2>Mendebug REST Server</h2>

<p>Pada waktu kita mengisi form dan menekan tombol Submit, client mengirim HTTP request dan data berbentuk JSON. Kemudian server memproses data yang diterima dan mengirim kembalian berupa JSON juga. Agar development lebih mudah, kita ingin melakukan request dan melihat response secara langsung, tanpa direpotkan dengan tampilan HTML dan coding Javascript. Kita bisa menggunakan plugin browser untuk melakukan hal ini.</p>

<p>Beberapa hal yang harus kita ketahui untuk mengetes proses di sisi server adalah:</p>

<ul>
<li>URL</li>
<li>HTTP Method</li>
<li>Tipe data yang dikirim</li>
<li>Data yang akan dikirim</li>
</ul>


<h3>Menggunakan Chrome</h3>

<p>Berikut adalah tampilan plugin Chrome, yaitu REST Console yang sudah terisi data di atas.</p>

<p><img src="/images/uploads/2013/05/debug-ajax/14-request-form-rest-console.png" title="Request Form REST Console" ></p>

<p>Selanjutnya kita tinggal menekan tombol yang sesuai dengan HTTP Method yang dibutuhkan. Bila sukses, kita akan mendapatkan tampilan seperti ini</p>

<p><img src="/images/uploads/2013/05/debug-ajax/15-response-sukses-rest-console.png" title="Response Sukses REST Console" ></p>

<p>Bila gagal, kita akan melihat tampilan seperti ini</p>

<p><img src="/images/uploads/2013/05/debug-ajax/16-response-error-rest-console.png" title="Response Gagal REST Console" ></p>

<h3>Menggunakan Firefox</h3>

<p>Hal yang sama bisa dilakukan dengan Poster di Firefox. Berikut adalah form yang digunakan untuk entri data.</p>

<p><img src="/images/uploads/2013/05/debug-ajax/17-request-form-poster.png" title="Request Form Poster" ></p>

<p>Bila sukses, kita mendapatkan hasil seperti ini</p>

<p><img src="/images/uploads/2013/05/debug-ajax/18-response-sukses-poster.png" title="Response Sukses Poster" ></p>

<p>Bila gagal berikut tampilannya</p>

<p><img src="/images/uploads/2013/05/debug-ajax/19-response-error-poster.png" title="Response Gagal Poster" ></p>

<p>Dengan menggunakan REST Console dan Poster, kita dapat mengurus coding di sisi server tanpa perlu dipusingkan dengan coding di sisi client (HTML, CSS, dan JS).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrasi Aplikasi]]></title>
    <link href="http://software.endy.muhardin.com/java/integrasi-aplikasi/"/>
    <updated>2013-05-20T21:20:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/integrasi-aplikasi</id>
    <content type="html"><![CDATA[<p>Aplikasi jaman sekarang jarang sekali yang berdiri sendiri.
Umumnya aplikasi yang kita buat harus terhubung dengan aplikasi yang dibuat orang lain.
Beberapa contohnya:</p>

<ul>
<li>kita membuat aplikasi mobile, terhubung ke social network seperti Facebook dan Twitter</li>
<li>kita membuat aplikasi bisnis, harus terhubung ke aplikasi akunting yang sudah lebih dulu ada</li>
<li>kita membuat aplikasi pembayaran tagihan, harus terhubung ke penyedia tagihan seperti PLN, Telkom, dsb</li>
</ul>


<p>Pada artikel ini, kita akan membahas beberapa strategi untuk menghubungkan aplikasi yang kita buat dengan aplikasi lain.</p>

<!--more-->


<p>Secara umum, ada empat strategi untuk menghubungkan aplikasi satu dengan lainnya:</p>

<ul>
<li>pemanggilan prosedur/function</li>
<li>messaging</li>
<li>sharing database</li>
<li>kirim/terima file</li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h2>Pemanggilan prosedur</h2>

<p>Pada metode ini, aplikasi yang akan melayani (kita sebut aplikasi server),
harus menyediakan mekanisme agar bisa dipanggil aplikasi lain (kita sebut aplikasi client).</p>

<p>Ada beberapa protokol yang populer digunakan dalam strategi ini, misalnya:</p>

<ul>
<li>SOAP</li>
<li>REST</li>
<li>ISO-8583</li>
<li>XMLRPC</li>
</ul>


<p>Ciri utama dalam strategi ini adalah:</p>

<ul>
<li>ada kesepakatan nama method yang akan dipanggil</li>
<li>ada kesepakatan jumlah dan tipe data yang dikirim dan diterima</li>
<li>client dan server harus online dalam waktu yang berbarengan.</li>
<li>setelah client memanggil server, dia akan menunggu sampai ada balasan dari server. Sebelum terima balasan, client tidak bisa melanjutkan. Fenomena ini dikenal dengan istilah synchronous invocation.</li>
</ul>


<p>Berikut beberapa contoh implementasi dari strategi ini:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">Remoting dengan Spring Framework</a></li>
<li><a href="http://martinusadyh.web.id/tulisanku/berkenalan-dengan-iso-8583-menggunakan-java/">Transaksi Finansial dengan ISO-8583</a></li>
</ul>


<h2>Messaging</h2>

<p>Konsep messaging sebetulnya sudah tidak asing lagi bagi kita. Sering kita gunakan sehari-hari dalam bentuk email, chatting, sms, dan sejenisnya.</p>

<p>Beberapa ciri dari messaging antara lain:</p>

<ul>
<li>pengirim dan penerima tidak harus online berbarengan. Bisa saja pengirim mengirim pesan pada saat penerima offline, setelah itu pengirim juga offline. Pada waktu penerima online, dia akan menerima pesan yang ditujukan kepadanya pada waktu dia sedang offline.</li>
<li>ada satu pihak yang berfungsi sebagai penyimpan message. Dalam dunia messaging, pihak ini disebut sebagai message broker.</li>
<li>karena sifatnya yang memungkinkan tidak online barengan, maka biasanya ada mekanisme status delivery</li>
<li>biasanya ada juga masa kadaluarsa message di dalam database broker. Sebagai contoh, bila handphone kita mati lebih dari tiga hari, maka sms yang ditujukan ke handphone tersebut dan belum sampai di handphone kita akan dihapus oleh operator telekomunikasi.</li>
<li>tidak ada aturan mengenai format dan tipe data. Pengirim bebas mengirim apa saja. Penerima yang harus melakukan validasi terhadap format message</li>
<li>tidak ada mekanisme notifikasi ketika ada message baru. Penerima harus secara periodik mengecek (polling) ke broker untuk mengetahui ada-tidaknya message baru</li>
</ul>


<p>Dalam Java, ada beberapa pilihan untuk implementasi strategi messaging, diantaranya:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-2/">melalui email</a></li>
<li><a href="http://www.playsms.org/">melalui sms</a></li>
<li><a href="http://software.endy.muhardin.com/java/intro-jms/">menggunakan protokol JMS</a></li>
<li>menggunakan protokol AMQP</li>
</ul>


<h2>Sharing Database</h2>

<p>Pada strategi ini, pengirim dan penerima menggunakan database sebagai media pertukaran data. Pengirim menaruh datanya ke suatu tabel di database untuk kemudian dibaca oleh penerima.</p>

<p>Karena menggunakan database, maka mekanisme ini memiliki beberapa ciri khusus interaksi dengan database, yaitu:</p>

<ul>
<li>transaction. Pengirim bisa memastikan datanya terkirim secara utuh. Bila terjadi error di tengah pengiriman data, maka data yang sudah terlanjur ditulis bisa dibatalkan</li>
<li>tipe data bisa di-enforce. Kita bisa menggunakan tipe data angka, text, dan tanggal. Bila pengirim salah memasukkan data, maka database server akan menolaknya.</li>
</ul>


<p>Mirip dengan messaging, tidak ada mekanisme notifikasi ketika ada data baru yang ditaruh pengirim. Penerima harus secara periodik mengecek (polling) ke database untuk mengetahui ada-tidaknya data baru. Untuk memudahkan polling, biasanya tiap data diberikan kolom status untuk membedakan mana data yang sudah diproses dan mana yang belum.</p>

<p>Bila kita menggunakan Spring Integration, kita bisa langsung menggunakan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#jdbc">implementasi yang tersedia</a> sehingga tidak perlu lagi membuatkan mekanisme pengecekan data baru. <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/jdbc">Contoh pemakaian juga sudah disediakan</a>, tinggal diikuti.</p>

<h2>File Transfer</h2>

<p>Sama seperti messaging, dengan strategi ini pengirim dan penerima tidak harus online berbarengan. Yang membedakannya dengan messaging adalah pada mekanisme ini biasanya format file dan struktur data di dalamnya sudah ditentukan. Demikian juga dengan lokasi penyimpanan file dan aturan penamaannya.</p>

<p>Berbeda dengan sharing database, mekanisme file transfer tidak memiliki mekanisme untuk memastikan data sampai dengan utuh. Kita sendiri yang harus memastikan keutuhan data, misalnya dengan mengirim file checksum bersama dengan file berisi data. File checksum ini bisa digunakan untuk memastikan file data terkirim secara utuh.</p>

<p>Pada mekanisme ini kita juga tidak bisa tahu progress pengiriman data. Apakah pengirim masih dalam proses mengirim atau sudah selesai? Kita tidak tahu secara pasti. Biasanya diakali dengan cara memeriksa ukuran file dalam selang waktu tertentu. Bila ukurannya masih terus bertambah, berarti proses pengiriman masih berjalan. Bila ukurannya tidak membesar lagi, ada indikasi bahwa pengiriman sudah selesai.</p>

<p>Untungnya prosedur pengecekan ini sudah dibuatkan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#files">implementasinya</a> oleh rekan-rekan Spring Integration, sehingga kita tinggal mengikuti <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/file">contoh yang tersedia</a>.</p>

<p>Demikianlah sedikit informasi mengenai integrasi antar aplikasi. Semoga bermanfaat :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mencari Relasi Foreign Key ke Tabel MySQL]]></title>
    <link href="http://software.endy.muhardin.com/java/mencari-relasi-foreign-key-ke-tabel-mysql/"/>
    <updated>2013-02-07T15:24:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mencari-relasi-foreign-key-ke-tabel-mysql</id>
    <content type="html"><![CDATA[<p>Di aplikasi yang kita buat, biasanya ada fitur untuk menghapus data atau record tertentu.
Bila kita menggunakan database relasional yang memiliki fitur <em>referential integrity</em>,
kita akan dicegah bila data yang ingin kita hapus memiliki relasi ke data lain.</p>

<p>Contohnya, kita punya tabel <code>Produk</code>, yang kolom <code>id</code>nya digunakan sebagai <em>foreign key</em>
oleh tabel <code>Penjualan</code>.
Dengan demikian, pada waktu ingin menghapus data <code>Produk</code>, terlebih dulu kita cek ke tabel
<code>Penjualan</code>, apakah ada data transaksi yang berelasi ke <code>Produk</code> yang ingin kita hapus.</p>

<p>Akan menjadi masalah bila aplikasi kita sudah besar, tabelnya ada ratusan.
Bagaimana cara kita mencari tabel mana saja yang memiliki relasi ke tabel <code>Produk</code>?
Tentunya tidak mungkin dicek satu-persatu.</p>

<p>Dengan bantuan paman Google, berikut adalah cara mendapatkannya untuk database MySQL.</p>

<!--more-->


<p>Pertama, login dulu ke MySQL</p>

<p><code>
mysql -u root -p
Password:
mysql&gt;
</code></p>

<p>Kemudian, gunakan database <code>information_schema</code></p>

<p><code>
use information_schema
</code></p>

<p>Terakhir, jalankan query SQL berikut</p>

<p><code>sql
SELECT TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME,
REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
FROM KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_NAME = 'produk'
AND REFERENCED_COLUMN_NAME = 'id'
AND TABLE_SCHEMA='db_penjualan';
</code></p>

<p>Inilah hasilnya</p>

<p><code>
+-------------------------------------------------------------------------------------------+
| TABLE_NAME         | COLUMN_NAME | CONSTRAINT_NAME     | REFERENCED_TABLE_NAME | REFERENCED_COLUMN_NAME |
+-------------------------------------------------------------------------------------------+
| penjualan          | id_produk   | fk_penjualan_produk | produk                | id                     |
| stok               | id_produk   | fk_stok_produk      | produk                | id                     |
+-------------------------------------------------------------------------------------------+
</code></p>

<p>Penjelasan:</p>

<ul>
<li>Table Name : Nama Tabel yang memiliki referensi</li>
<li>Column Name : Nama Kolom yang merupakan <em>foreign key</em></li>
<li>Constraint Name : Nama constraint <em>foreign key</em></li>
<li>Referenced Table Name : Nama tabel yang dituju</li>
<li>Referenced Column Name : Nama kolom yang dituju <em>foreign key</em></li>
</ul>


<p>Demikian sekilas tutorial. Semoga bermanfaat dalam membuat validasi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memahami Dependency Injection]]></title>
    <link href="http://software.endy.muhardin.com/java/memahami-dependency-injection/"/>
    <updated>2013-01-24T18:14:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/memahami-dependency-injection</id>
    <content type="html"><![CDATA[<p><a href="http://www.springsource.org/spring-framework">Spring Framework</a>
merupakan framework yang sangat populer
dan banyak digunakan orang di seluruh dunia.
Jargon utama yang sering kita dengar bersamaan dengan Spring Framework
adalah prinsip <em>Dependency Injection</em>. Ini adalah teknik pemrograman
yang digadang-gadang mampu merapikan aplikasi yang kita buat sehingga
mudah dipahami dan dikelola.</p>

<p>Tapi apakah yang dimaksud dengan <em>Dependency Injection</em> atau <em>Inversion of Control</em> itu?</p>

<!--more-->


<h1>Contoh Kasus</h1>

<p>Sebagai programmer, kita akan lebih mudah memahami suatu konsep
bila sudah melihat sendiri contoh kode program dan aplikasinya.
Untuk itu, kita akan membuat sebuah contoh kasus sederhana,
yaitu menyimpan data ke tabel <code>produk</code> dalam database.</p>

<p>Untuk titik awal, misalnya kita memiliki class <code>Produk</code> sebagai berikut:</p>

<h2>Produk.java</h2>

<p>```java
public class Produk {</p>

<pre><code>private Integer id;
private String kode;
private String nama;
private BigDecimal harga;

// getter dan setter tidak ditampilkan
</code></pre>

<p>}
```</p>

<p>Supaya rapi, kode program untuk Create (insert), Read (select),
Update, dan Delete (CRUD), akan kita kumpulkan di dalam class <code>ProdukDao</code> sebagai berikut:</p>

<h2>ProdukDao.java</h2>

<p>```java
public class ProdukDao {</p>

<pre><code>private DataSource dataSource;

public void create(Produk p) throws Exception {
    String sql = "insert into produk (kode, nama, harga) ";
    sql += "(?,?,?)";

    Connection databaseConnection = dataSource.getConnection();
    PreparedStatement ps = databaseConnection.prepareStatement(sql);
    ps.setString(1, p.getKode());
    ps.setString(2, p.getNama());
    ps.setBigDecimal(3, p.getHarga());
    ps.executeUpdate();
    databaseConnection.close();
}

public Produk cariById(Integer id){
    // implementasi tidak ditulis
}


public void update(Produk p){
    // implementasi tidak ditulis
}


public void delete(Produk p){
    // implementasi tidak ditulis
}
</code></pre>

<p>}
```</p>

<p>Sebagai demonstrasi, kita akan menggunakan/memanggil <code>ProdukDao</code> ini dalam class
<code>ProdukDaoTest</code> sebagai berikut:</p>

<h2>ProdukDaoTest.java</h2>

<p>```java
public class ProdukDaoTest {</p>

<pre><code>public static void main(String[] xx){
    Produk p = new Produk();
    p.setKode("P-001");
    p.setNama("Produk 001");
    p.setHarga(new BigDecimal(10000.00);

    ProdukDao pd = new ProdukDao();
    pd.simpan(p);
}
</code></pre>

<p>}
```</p>

<p>Dari ketiga class di atas, kita akan melihat:</p>

<ul>
<li>bagaimana implementasi tanpa Dependency Injection</li>
<li>bagaimana konsep Dependency Injection</li>
<li>bagaimana menggunakan Spring Framework untuk melakukan Dependency Injection</li>
</ul>


<p>Sebelumnya, apa itu dependency injection? Kalau diterjemahkan ke bahasa Indonesia,
kira-kira artinya adalah <em>menyediakan kebutuhan</em>.
Kebutuhan apa yang dimaksud?</p>

<p>Coba lihat class <code>ProdukDao</code>. Untuk bisa menjalankan tugasnya dengan baik,
dia membutuhkan object <code>DataSource</code>, yaitu koneksi ke database.
Bagaimana <code>ProdukDao</code> mendapatkan <code>DataSource</code> inilah yang menjadi pembahasan dalam <em>Dependency Injection</em> (DI).</p>

<h1>Tanpa DI</h1>

<p>Kalau kita tidak menggunakan prinsip DI, maka <code>ProdukDao</code> harus mengadakan sendiri object <code>DataSource</code>.
Kira-kira begini implementasinya:</p>

<p>```java
public class ProdukDao {</p>

<pre><code>private DataSource dataSource;

public ProdukDao() throws Exception {
    dataSource = new BasicDataSource();
    dataSource.setDriverClassName("com.mysql.jdbc.Driver");
    dataSource.setUsername("root");
    dataSource.setPassword("admin");
    dataSource.setUrl("jdbc:mysql://localhost/belajar");
}

public void create(Produk p) throws Exception {
    String sql = "insert into produk (kode, nama, harga) ";
    sql += "(?,?,?)";

    Connection databaseConnection = dataSource.getConnection();
    PreparedStatement ps = databaseConnection.prepareStatement(sql);
    ps.setString(1, p.getKode());
    ps.setString(2, p.getNama());
    ps.setBigDecimal(3, p.getHarga());
    ps.executeUpdate();
    databaseConnection.close();
}

public Produk cariById(Integer id){
    // implementasi tidak ditulis
}


public void update(Produk p){
    // implementasi tidak ditulis
}


public void delete(Produk p){
    // implementasi tidak ditulis
}
</code></pre>

<p>}
```</p>

<p>Perlu kita sadari bahwa pada aplikasi yang sebenarnya, kode akses database tidak hanya <code>ProdukDao</code> saja.
Nantinya juga ada <code>CustomerDao</code>, <code>PenjualanDao</code>, dan sebagainya.
Di aplikasi berskala menengah, bisa ada ratusan class seperti ini,
sehingga untuk memahami situasinya, kita tidak boleh berpikir hanya di satu class ini saja.</p>

<p>Ada beberapa kelemahan dari cara tanpa DI ini, diantaranya:</p>

<ul>
<li>Konfigurasi koneksi database tersebar di banyak tempat, yaitu di semua <code>XxxDao</code></li>
<li>Object <code>dataSource</code> juga tersebar, tidak bisa satu <code>dataSource</code> dipakai bersama oleh semua <code>XxxDao</code></li>
<li>Karena konfigurasi dan inisialisasinya tersebar, bila ada perubahan (misalnya menggunakan <em>connection pooling</em>),
harus dilakukan di banyak tempat.</li>
<li>Semua perubahan di atas mengharuskan full compile karena banyaknya class yang terlibat.</li>
</ul>


<p>Untuk mengatasi keterbatasan di atas, kita gunakan prinsip DI.</p>

<h1>DI manual</h1>

<p>Bila kita gunakan prinsip DI, maka <code>ProdukDao</code> tidak lagi mengurus inisialisasi <code>dataSource</code>.
Dia cukup tahu beres dan tinggal pakai. Lalu siapa yang melakukan inisialisasi?
Boleh siapa saja, tapi untuk kesederhanaan ilustrasi, mari kita tulis saja di dalam <code>ProdukDaoTest</code>, sebagai berikut:</p>

<p>```java
public class ProdukDaoTest {</p>

<pre><code>public static void main(String[] xx){
    Produk p = new Produk();
    p.setKode("P-001");
    p.setNama("Produk 001");
    p.setHarga(new BigDecimal(10000.00);

    DataSource dataSource = new BasicDataSource();
    dataSource.setDriverClassName("com.mysql.jdbc.Driver");
    dataSource.setUsername("root");
    dataSource.setPassword("admin");
    dataSource.setUrl("jdbc:mysql://localhost/belajar");

    ProdukDao pd = new ProdukDao();
    pd.simpan(p);
}
</code></pre>

<p>}
```</p>

<p>Lalu bagaimana cara memasukkan (inject) ke dalam <code>ProdukDao</code>?
Kita harus sediakan jalan masuknya. Ada dua pilihan:</p>

<ul>
<li>membuat method untuk mengisi data (setter-injection)</li>
<li>menambah argumen di constructor (constructor-injection)</li>
</ul>


<p>Agar jelas, kita akan buatkan dua-duanya.</p>

<p>```java
public class ProdukDao {</p>

<pre><code>private DataSource dataSource;

// ini kalau mau inject melalui constructor
public ProdukDao(DataSource ds) {
    this.dataSource = ds;
}

// ini kalau mau method sendiri (setter-injection)
public void setDataSource(DataSource ds) {
    this.dataSource = ds;
}

// method lain tidak ditampilkan supaya tidak bikin penuh
</code></pre>

<p>}
```</p>

<p>Selanjutnya, dalam <code>ProdukDaoTest</code> kita bisa isikan object DataSource tersebut melalui constructor seperti ini:</p>

<p><code>java
ProdukDao pd = new ProdukDao(dataSource);
</code></p>

<p>ataupun melalui method setter seperti ini:</p>

<p><code>java
ProdukDao pd = new ProdukDao();
pd.setDataSource(dataSource);
</code></p>

<p>Cara manual ini sudah lumayan merapikan kode program kita, karena bila ada perubahan terhadap inisialisasi dataSource, seperti misalnya:</p>

<ul>
<li>perubahan konfigurasi koneksi</li>
<li>perubahan implementasi connection pooling</li>
<li>ingin menggunakan managed DataSource melalui JNDI</li>
<li>dsb</li>
</ul>


<p>Kita cukup melakukan perubahan di satu tempat saja, yaitu dimana dia diinisialisasikan.</p>

<h1>DI Spring XML</h1>

<p>Walaupun bisa dilakukan secara manual, tetapi ada baiknya kita menggunakan Spring Framework untuk melakukan DI.
Beberapa alasannya antara lain:</p>

<ul>
<li>AOP (tidak dibahas pada artikel ini)</li>
<li>keseragaman antar project/aplikasi</li>
<li>standarisasi skillset. Bila cari programmer baru, cukup mensyaratkan pengetahuan Spring Framework.
Tidak perlu lagi ditraining tentang teknik DI yang kita karang sendiri.</li>
</ul>


<p>Spring Framework <strong>umumnya</strong> dikonfigurasi dengan file XML (walaupun bisa juga full Java).
Berikut adalah contoh file konfigurasinya, misalnya kita beri nama <code>konfig-spring.xml</code>:</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;

&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost/belajar" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="admin" /&gt;
&lt;/bean&gt;

&lt;bean id="produkDao" class="com.muhardin.endy.belajar.spring.ProdukDao"&gt;
    &lt;property name="dataSource" ref="dataSource"/&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>File konfigurasi tersebut kita baca dan gunakan dalam class <code>ProdukDaoTest</code>,
perhatikan perbedaan inisialisasi <code>DataSource</code> dan <code>ProdukDao</code></p>

<p>```java
public class ProdukDaoTest {</p>

<pre><code>public static void main(String[] xx){
    Produk p = new Produk();
    p.setKode("P-001");
    p.setNama("Produk 001");
    p.setHarga(new BigDecimal(10000.00);

    ApplicationContext ctx 
        = new ClassPathXmlApplicationContext("classpath:konfig-spring.xml");

    ProdukDao pd = ctx.getBean(ProdukDao.class);
    pd.simpan(p);
}
</code></pre>

<p>}
```</p>

<p>Pada contoh di atas, kita bisa lihat beberapa perbedaan yaitu:</p>

<ul>
<li>inisialisasi <code>DataSource</code> pindah ke dalam <code>konfig-spring.xml</code></li>
<li>tidak perlu lagi <em>mengisikan</em> <code>DataSource</code> ke dalam <code>ProdukDao</code>, karena sudah dilakukan oleh Spring.</li>
</ul>


<p>Walaupun demikian, masih ada sedikit ganjalan, yaitu:</p>

<ul>
<li>bila <code>XxxDao</code> jumlahnya ratusan, maka file <code>konfig-spring.xml</code> akan membengkak.</li>
</ul>


<p>Apa solusinya?</p>

<h1>DI Spring @Autowired</h1>

<p>Spring Framework menyediakan fitur <em>component-scan</em>, yaitu dia akan melihat isi <em>package</em> yang kita sebutkan,
kemudian akan mencari class-class yang diberi anotasi berikut:</p>

<ul>
<li><code>@Repository</code></li>
<li><code>@Service</code></li>
<li><code>@Controller</code></li>
<li><code>@Component</code></li>
</ul>


<p>Setelah ditemukan, maka dia akan melakukan inisialisasi terhadap class tersebut, dan lalu mengisi (inject)
semua kebutuhannya (dependency). Untuk injection ini, kita juga tidak perlu lagi menyediakan setter method maupun
menambahkan argumen di constructor. Kita dapat menggunakan anotasi <code>@Autowired</code>.</p>

<p>Berikut adalah konfigurasi <code>konfig-spring.xml</code> yang baru:</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;

&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql://localhost/belajar" /&gt;
    &lt;property name="username" value="root" /&gt;
    &lt;property name="password" value="admin" /&gt;
&lt;/bean&gt;

&lt;context:component-scan base-package="com.muhardin.endy.belajar.spring" /&gt;
</code></pre>

<p></beans>
```</p>

<p>Perhatikan bahwa deklarasi <code>produkDao</code> telah digantikan dengan perintah <code>context:component-scan</code>.</p>

<p>Berikut adalah perubahan di <code>ProdukDao</code></p>

<p>```java
@Repository
public class ProdukDao {</p>

<pre><code>@Autowired private DataSource dataSource;

public void create(Produk p){
    String sql = "insert into produk (kode, nama, harga) ";
    sql += "(?,?,?)";

    Connection databaseConnection = dataSource.getConnection();
    PreparedStatement ps = databaseConnection.prepareStatement(sql);
    ps.setString(1, p.getKode());
    ps.setString(2, p.getNama());
    ps.setBigDecimal(3, p.getHarga());
    ps.executeUpdate();
    databaseConnection.close();
}

// method lain tidak ditampilkan supaya tidak bikin penuh
</code></pre>

<p>}
```</p>

<p>Perhatikan bahwa setter dan constructor injection sudah dihapus,
dan digantikan dengan anotasi <code>@Autowired</code>.
Semua field/property yang memiliki anotasi <code>@Autowired</code> akan diisikan oleh Spring dengan object bertipe-data sesuai.
Bila tidak ditemukan, maka aplikasi akan gagal start dengan pesan error seperti ini:</p>

<p><code>
SEVERE: Context initialization failed
org.springframework.beans.factory.BeanCreationException:
Error creating bean with name 'produkDao':
Injection of autowired dependencies failed;
nested exception is org.springframework.beans.factory.BeanCreationException:
Could not autowire field:
private javax.sql.DataSource dataSource;
nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException:
No matching bean of type [javax.sql.DataSource] found for dependency:
expected at least 1 bean which qualifies as autowire candidate for this dependency.
</code></p>

<p>Bila menemukan pesan error tersebut, artinya Spring tidak memiliki satupun object bertipe <code>DataSource</code>
dalam daftar pengelolaannya. Untuk bisa dikelola oleh Spring, ada beberapa caranya, yaitu:</p>

<ul>
<li>dideklarasikan secara tertulis seperti object <code>dataSource</code> di atas</li>
<li>discan otomatis melalui <code>component-scan</code> dan anotasi <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, ataupun<code>@Component</code>.
Contohnya object <code>produkDao</code> di atas.</li>
</ul>


<p>Ada beberapa kesalahan yang umum terjadi sehingga muncul pesan error di atas, diantaranya</p>

<ul>
<li>sudah ada anotasi, tapi package tempatnya berada tidak didaftarkan dalam <code>component-scan</code></li>
<li>package sudah didaftarkan dalam <code>component-scan</code>, tapi classnya tidak diberikan anotasi <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, ataupun<code>@Component</code>.</li>
<li>sudah ada anotasi, packagenya sudah didaftarkan, tapi file xml yang memuat konfigurasi tersebut tidak diload oleh aplikasi.
Ini biasa terjadi kalau satu aplikasi terdiri dari banyak file konfigurasi Spring (yang mana ini adalah hal yang umum terjadi)</li>
</ul>


<p>Lalu kapan dan bagaimana Spring membaca file konfigurasi? Ada beberapa cara:</p>

<ul>
<li>Ditulis dalam kode program : <code>new ClassPathXmlApplicationContext("classpath:konfig-spring.xml")</code></li>
<li>Bila aplikasinya berbasis web, biasanya diinisialisasi melalui <code>web.xml</code> seperti ini:</li>
</ul>


<p>```xml
<context-param></p>

<pre><code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;
    classpath*:konfig-spring.xml
&lt;/param-value&gt;
</code></pre>

<p></context-param>
<listener></p>

<pre><code>&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>Demikianlah penjelasan tentang konsep Dependency Injection dan Spring Framework. Semoga bermanfaat.</p>
]]></content>
  </entry>
  
</feed>
