<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/java/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2012-10-04T12:19:31+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Konsep Dasar Log4j]]></title>
    <link href="http://software.endy.muhardin.com/java/konsep-dasar-log4/"/>
    <updated>2012-07-30T20:59:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/konsep-dasar-log4</id>
    <content type="html"><![CDATA[<p>Walaupun sudah dibuatkan <a href="http://endy.artivisi.com/blog/java/menggunakan-log4j">minibook</a>, tapi ternyata ada juga beberapa orang yang tidak paham bagaimana cara enable/disable log message di aplikasi Java. Oleh karena itu, baiklah saya jelaskan lagi secara lebih singkat.</p>

<!--more-->


<p>Ada beberapa komponen penting dalam aplikasi logging :</p>

<ul>
<li><p>logger : ini adalah yang kita gunakan di aplikasi untuk mengeluarkan pesan.
tadinya System.out.println("Coba");
diganti menjadi logger.info("Coba");</p></li>
<li><p>appender : komponen yang bertugas menampilkan log message
misalnya : console appender : menampilkan ke System.out
File appender : menulis log ke file
Rolling file appender : menulis ke file, lalu dirolling berdasarkan kriteria tertentu (size atau time)
misalnya, setelah mencapai 1 MB, tulis ke file berbeda, atau tiap 1 jam ganti file</p></li>
<li><p>category : ini adalah sumber log message, yaitu package atau realm.
<strong>biasanya</strong> category == package
Ini digunakan untuk memfilter log mana yang akan ditampilkan ke appender mana</p></li>
</ul>


<p>Selain 3 komponen itu, ada terminologi yang namanya level.
Contoh level : error, warn, info, debug, trace
Level ini berlaku bertingkat, jadi kalau kita bilang info, artinya info, warn, error.
Kalau kita bilang debug, maka hasilnya debug, info, warn, error.</p>

<p>Log message ditampilkan atau tidak, tergantung category dan level.</p>

<p>Contoh kasus :
Saya membuat aplikasi, berisi package com.artivisi.belajar.logging.
Isinya ada 2 class, Coba dan Halo.</p>

<p>Aplikasi saya ini menggunakan framework Spring, yang mana berisi package org.springframework, yang berisi banyak sub package, seperti org.springframework.core, org.springframework.jdbc, dsb.</p>

<p>Untuk source code yang saya tulis sendiri (Coba dan Halo), saya ingin menampilkan level debug, karena masih fase development. Nantinya kalau sudah production, cukup level warn saja yang ditampilkan.
Sedangkan untuk library Spring Framework, cukup level error saja yang ditampilkan.</p>

<p>Semua log message ditampilkan ke terminal, supaya mudah diamati.</p>

<p>Contoh kasus di atas, bila kita menggunakan log4j akan dikonfigurasi sebagai berikut :</p>

<p><div><script src='https://gist.github.com/3205393.js?file='></script>
<noscript><pre><code># by default, levelnya adalah INFO, tampilkan ke System.out
log4j.rootLogger=INFO,Konsole 

# untuk package com.artivisi, tampilkan level DEBUG ke System.out
log4j.logger.com.artivisi=DEBUG,Konsole

# untuk spring, error saja yang ditampilkan
log4j.logger.org.springframework=ERROR,Konsole

# Appender Konsole adalah System.out
log4j.appender.Konsole=org.apache.log4j.ConsoleAppender 
log4j.appender.Konsole.layout=org.apache.log4j.PatternLayout 
# Format tanggal menurut ISO­8601 : %d 
log4j.appender.Konsole.layout.ConversionPattern=%d [%t] %­5p %c ­ %m%n
</code></pre></noscript></div>
</p>

<p>Konfigurasi di atas harus dibuat dengan nama log4j.properties, dan diletakkan di dalam classpath. Kalau namanya tidak sama atau lokasinya salah, maka tidak akan dibaca oleh Log4J.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Aplikasi Java]]></title>
    <link href="http://software.endy.muhardin.com/java/monitoring-aplikasi-java/"/>
    <updated>2012-07-28T20:45:07+07:00</updated>
    <id>http://software.endy.muhardin.com/java/monitoring-aplikasi-java</id>
    <content type="html"><![CDATA[<p>Setelah aplikasi kita selesai dibuat, langkah selanjutnya tentu saja adalah menjalankannya di server production. Dalam software development, ini disebut dengan transisi dari development menjadi operation.</p>

<p>Salah satu aspek penting dalam fase operation adalah monitoring performance. Monitoring dilakukan untuk berbagai tujuan, diantaranya :</p>

<ul>
<li><p>Mengetahui karakteristik aplikasi dalam menggunakan resource. Informasi ini bisa kita gunakan untuk melakukan tuning performance</p></li>
<li><p>Mengetahui karakteristik user dalam menggunakan aplikasi. Perilaku user ini berguna untuk menentukan waktu-waktu sibuk dan waktu-waktu idle, sehingga kita bisa melakukan capacity planning dengan akurat.</p></li>
<li><p>Mengetahui berapa persen resource yang sudah terpakai, sehingga kita punya gambaran kapan harus melakukan upgrade, dan apa yang harus diupgrade</p></li>
<li><p>Mendapatkan notifikasi secepat mungkin pada saat sistem mengalami gangguan</p></li>
</ul>


<!--more-->


<p>Pada umumnya, monitoring dilakukan dengan memantau bagian-bagian dalam sistem, diantaranya :</p>

<ul>
<li><p>Dalam sistem operasi</p>

<ul>
<li><p>Jumlah proses</p></li>
<li><p>CPU</p></li>
<li><p>Memori</p></li>
<li><p>Disk I/O</p></li>
<li><p>Network I/O</p></li>
</ul>
</li>
<li><p>Dalam aplikasi</p>

<ul>
<li><p>Jumlah thread</p></li>
<li><p>Alokasi memori</p></li>
<li><p>Class/method yang mengkonsumsi resource terbesar</p></li>
<li><p>Class/method yang memakan waktu lama</p></li>
<li><p>Untuk bahasa pemrograman yang berjalan di virtual machine (seperti Java, .NET, Ruby, dsb), kita juga perlu memantau perilaku Garbage Collector</p></li>
</ul>
</li>
<li><p>Database Server</p>

<ul>
<li><p>Jumlah koneksi yang dibuka baik yang idle maupun yang aktif</p></li>
<li><p>Query yang memakan waktu lama</p></li>
<li><p>Tabel yang sering diakses</p></li>
</ul>
</li>
</ul>


<p>Dalam melakukan monitoring, ada banyak tools yang digunakan. Beberapa aplikasi opensource yang populer diantaranya :</p>

<ul>
<li><p>Nagios</p></li>
<li><p>Icinga : ini adalah fork dari Nagios</p></li>
<li><p>Zenoss</p></li>
<li><p>Zabbix</p></li>
<li><p>OpenNMS</p></li>
<li><p>Hyperic</p></li>
</ul>


<p>Pada umumnya, semua aplikasi di atas memiliki fitur yang mirip-mirip, yaitu :</p>

<ul>
<li><p>SNMP Monitoring. SNMP adalah protokol yang populer, tersedia di sistem operasi, network hardware (switch, router, dsb), bahkan aplikasi (Java VM, database server, dsb)</p></li>
<li><p>JMX Monitoring. JMX adalah protokol untuk memonitor aplikasi Java. Dengan menggunakan JMX, informasi yang diperoleh akan lebih rinci.</p></li>
<li><p>Agent dan Agentless Monitoring. Agent adalah aplikasi kecil yang diinstal di server yang ingin dimonitor. Dengan agent, informasi yang dikumpulkan bisa lebih detail. Di lain sisi, tidak semua tempat bisa dipasangi agent (misalnya router). Umumnya aplikasi monitoring mendukung monitoring dengan agent maupun tanpa agent.</p></li>
</ul>


<p>Cara instalasi dari aplikasi di atas bisa dibaca di websitenya masing-masing. Yang akan kita bahas di sini adalah cara konfigurasi aplikasi Java, khususnya yang menggunakan framework Spring dan Hibernate, agar bisa dimonitor oleh aplikasi-aplikasi di atas.</p>

<p>Pada prinsipnya, berikut adalah hal-hal yang perlu dilakukan :</p>

<ol>
<li><p>Menentukan metric atau jenis data yang akan dimonitor</p></li>
<li><p>Mengaktifkan MBean agar metric tersebut dipublish melalui JMX</p></li>
<li><p>Mengaktifkan JMX server agar bisa dihubungi dari aplikasi monitoring</p></li>
</ol>


<p>Aplikasi yang akan kita jadikan contoh kasus adalah template standar aplikasi web ArtiVisi, yang <a href="https://github.com/endymuhardin/belajar-restful">source codenya tersedia di Github</a>.</p>

<h2>Menentukan metric</h2>

<p>Beda jenis datanya, tentu beda juga cara pengumpulan data dan tools yang digunakan untuk mengolahnya.</p>

<h3>Tabel Metrik dan Tools</h3>

<table>
<thead>
<tr>
<th>Metric      </th>
<th> Metode Pengumpulan </th>
<th> Tools</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU         </td>
<td> SNMP atau Agent    </td>
<td> Nagios,Zenoss,dkk</td>
</tr>
<tr>
<td>Memori      </td>
<td> SNMP atau Agent    </td>
<td> Nagios,Zenoss,dkk</td>
</tr>
<tr>
<td>Disk IO     </td>
<td> SNMP atau Agent    </td>
<td> Nagios,Zenoss,dkk</td>
</tr>
<tr>
<td>Network     </td>
<td> SNMP atau Agent    </td>
<td> Nagios,Zenoss,dkk</td>
</tr>
<tr>
<td>Tomcat      </td>
<td> JMX                </td>
<td> Hyperic</td>
</tr>
<tr>
<td>MySQL       </td>
<td> Agent              </td>
<td> Hyperic</td>
</tr>
<tr>
<td>Spring      </td>
<td> AOP                </td>
<td> Javamelody</td>
</tr>
<tr>
<td>Hibernate   </td>
<td> JMX                </td>
<td> Hyperic</td>
</tr>
</tbody>
</table>


<h2>Monitoring dengan JavaMelody</h2>

<p>Untuk mengaktifkan monitoring menggunakan JavaMelody, ada beberapa langkah yang perlu kita lakukan, yaitu :</p>

<ol>
<li>Menambahkan jar JavaMelody</li>
<li>Memasang AOP interceptor supaya bisa memonitor beans dalam Spring</li>
<li>Mengaktifkan monitoring JavaMelody</li>
</ol>


<p>Karena projectnya menggunakan Maven, maka menambahkan jar sangat mudah, cukup dengan menambahkan dependency sebagai berikut :</p>

<p><div><script src='https://gist.github.com/3192086.js?file=pom.xml'></script>
<noscript><pre><code>&lt;dependency&gt;
	&lt;groupId&gt;net.bull.javamelody&lt;/groupId&gt;
	&lt;artifactId&gt;javamelody-core&lt;/artifactId&gt;
	&lt;version&gt;1.39.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre></noscript></div>
</p>

<p>Selanjutnya, kita memasang interceptor supaya object yang kita buat dimonitor oleh JavaMelody. Biasanya kita memonitor implementasi proses bisnis. Berikut konfigurasi applicationContext.xml</p>

<p><div><script src='https://gist.github.com/3192086.js?file=applicationContext.xml'></script>
<noscript><pre><code>&lt;bean id=&quot;facadeMonitoringAdvisor&quot; 
      class=&quot;net.bull.javamelody.MonitoringSpringAdvisor&quot;&gt;
	&lt;property name=&quot;pointcut&quot;&gt;
		&lt;bean class=&quot;net.bull.javamelody.MonitoredWithInterfacePointcut&quot;&gt;
			&lt;property name=&quot;interfaceName&quot;
			          value=&quot;com.artivisi.belajar.restful.service.MonitoredService&quot; 
	                /&gt;
		&lt;/bean&gt;
	&lt;/property&gt;
&lt;/bean&gt;</code></pre></noscript></div>
</p>

<p>Terakhir, kita aktifkan JavaMelody. Karena aplikasinya adalah aplikasi web, maka inisialisasi dilakukan di dalam file web.xml sebagai berikut</p>

<p><div><script src='https://gist.github.com/3192086.js?file=web.xml'></script>
<noscript><pre><code>&lt;context-param&gt;
	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
	&lt;param-value&gt;
		classpath:net/bull/javamelody/monitoring-spring.xml
        classpath*:com/artivisi/**/applicationContext.xml
    &lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
	&lt;listener-class&gt;net.bull.javamelody.SessionListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;!-- Monitor aplikasi menggunakan javamelody --&gt;
&lt;filter&gt;
	&lt;filter-name&gt;monitoring&lt;/filter-name&gt;
	&lt;filter-class&gt;net.bull.javamelody.MonitoringFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
	&lt;filter-name&gt;monitoring&lt;/filter-name&gt;
	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;</code></pre></noscript></div>
</p>

<p>Setelah selesai, kita bisa jalankan aplikasi seperti biasa. Untuk mengakses hasil monitoring, kita dapat mengakses url http://host:port/context-aplikasi/monitoring.</p>

<p>Berikut adalah screenshotnya.</p>

<p><img src="/images/uploads/2012/07/JavaMelody-Charts.png" title="JavaMelody-Charts" ></p>

<h2>Mengaktifkan MBean</h2>

<p>Selain menggunakan JavaMelody, kita juga bisa melakukan monitoring menggunakan JMX. Beruntung kita yang menggunakan Spring, JMX akan sangat mudah dikonfigurasi. Pada contoh berikut, kita akan mengaktifkan monitoring terhadap statistik Hibernate. Langkah-langkahnya adalah sebagai berikut :</p>

<ol>
<li>Mengaktifkan fitur statistik dalam Hibernate</li>
<li>Mendeklarasikan MBean untuk memonitor statistik Hibernate</li>
<li>Menginstankan JMX server (MBean Server)</li>
</ol>


<p>Aktifasi fitur statistik dalam Hibernate dilakukan dengan mengisi nilai true pada variabel konfigurasi hibernate.generate_statistics, sebagai berikut :</p>

<p><div><script src='https://gist.github.com/3192099.js?file=hibernate-statistics.xml'></script>
<noscript><pre><code>&lt;bean id=&quot;sessionFactory&quot;
	class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;
	p:dataSource-ref=&quot;dataSource&quot;&gt;
	&lt;property name=&quot;hibernateProperties&quot;&gt;
		&lt;props&gt;
			&lt;prop key=&quot;hibernate.generate_statistics&quot;&gt;true&lt;/prop&gt;
		&lt;/props&gt;
	&lt;/property&gt;
	&lt;property name=&quot;packagesToScan&quot; value=&quot;com.artivisi.belajar.restful.domain&quot; /&gt;
&lt;/bean&gt;</code></pre></noscript></div>
</p>

<p>Selanjutnya, statistik yang telah dihitung ini dipublish menggunakan MBean.</p>

<p><div><script src='https://gist.github.com/3192099.js?file=hibernateMBean.xml'></script>
<noscript><pre><code>&lt;bean id=&quot;hibernateStatisticsMBean&quot; class=&quot;org.hibernate.jmx.StatisticsService&quot;&gt;
	&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;
&lt;/bean&gt;</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/3192099.js?file=mbeanExporter.xml'></script>
<noscript><pre><code>&lt;bean id=&quot;mbeanExporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot;&gt;
  &lt;property name=&quot;beans&quot;&gt;
    &lt;map&gt;
      &lt;entry 
        key=&quot;SpringBeans:name=hibernateStatisticsMBean&quot; 
        value-ref=&quot;hibernateStatisticsMBean&quot; /&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;</code></pre></noscript></div>
</p>

<p>Terakhir, kita sediakan MBean Server untuk menjalankan MBean yang sudah kita deklarasikan di atas. Spring sudah memudahkan konfigurasinya dengan namespace yang baru</p>

<p><div><script src='https://gist.github.com/3192099.js?file=mbean-server.xml'></script>
<noscript><pre><code>&lt;context:mbean-server/&gt;</code></pre></noscript></div>
</p>

<p>Selanjutnya, jalankan aplikasi kita seperti biasa di Tomcat, Jetty, dsb.
Setelah aplikasi berjalan, kita dapat melihatnya menggunakan JConsole.</p>

<p>Jalankan JConsole, dan pilih proses yang akan dimonitor.</p>

<p><img src="/images/uploads/2012/07/jconsole-select-pid.png" title="jconsole-select-pid" ></p>

<p>Tampilkan MBean Hibernate Statistics</p>

<p><img src="/images/uploads/2012/07/jconsole-hibernate-statistics.png" title="jconsole-hibernate-statistics" ></p>

<p>Kita bisa lihat bahwa statistik Hibernate sudah dapat diakses. Informasi ini juga bisa ditampilkan di aplikasi monitoring seperti OpenNMS, Hyperic, dan aplikasi lain yang support JMX.</p>

<p>Selain itu, kalau kita sudah mengaktifkan JavaMelody seperti dijelaskan di atas, MBean ini juga bisa ditampilkan di url yang sama seperti screenshot di bawah</p>

<p><img src="/images/uploads/2012/07/javamelody-mbeans.png" title="javamelody-mbeans" ></p>

<h2>Kesimpulan</h2>

<p>Demikianlah hasil oprek-oprek sambil menunggu motor servis rutin. Dengan beberapa langkah sederhana, kita dapat memperoleh informasi lengkap tentang apa yang terjadi di aplikasi kita. Informasi ini selanjutnya dapat dijadikan pedoman untuk melakukan tuning performance. Selain itu, dengan menggunakan aplikasi pengolah data seperti <a href="http://code.google.com/p/rocksteady/">Rocksteady</a>, kita dapat membuat early warning system, yaitu suatu sistem yang dapat memprediksi terjadinya bencana dan memberikan notifikasi, sehingga kita bisa melakukan antisipasi.</p>

<h2>Referensi</h2>

<ul>
<li><p><a href="http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html">JMX Homepage</a></p></li>
<li><p><a href="http://visualvm.java.net/">VisualVM Homepage</a></p></li>
<li><p><a href="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html">Cara menggunakan JConsole</a></p></li>
<li><p><a href="http://dzone.com/snippets/spring-jmx-sample">Cara konfigurasi Spring dan Hibernate</a></p></li>
<li><p><a href="http://nurkiewicz.blogspot.com/2011/03/jolokia-highcharts-jmx-for-human-beings.html">Menampilkan data dari JMX dengan Jolokia</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staged Deployment]]></title>
    <link href="http://software.endy.muhardin.com/java/staged-deployment/"/>
    <updated>2011-08-16T15:57:35+07:00</updated>
    <id>http://software.endy.muhardin.com/java/staged-deployment</id>
    <content type="html"><![CDATA[<p>Staged Deployment</p>

<p>Pada waktu kita coding, tentunya kita melakukan test terhadap kode program yang kita tulis. Kita jalankan langkah-langkah sesuai yang telah didefinisikan dalam test scenario. Setelah test di komputer kita sendiri (local) selesai dilakukan, tentunya kode program tersebut tidak langsung kita deploy ke production. Best practicesnya adalah, kita deploy aplikasinya ke server testing untuk kemudian ditest oleh Software Tester. Barulah setelah dinyatakan OK oleh tester, aplikasi versi terbaru tersebut kita deploy ke production.</p>

<p>Dengan demikian, kita memiliki tiga deployment environment, yaitu :</p>

<ul>
<li><p>development (komputer si programmer)</p></li>
<li><p>testing (test server)</p></li>
<li><p>production (live system)</p></li>
</ul>


<p>Environment ini bisa lebih banyak lagi kalau aplikasi kita harus dites kompatibilitasnya dengan berbagai hardware atau sistem operasi.</p>

<p>Cara kerja seperti ini disebut dengan istilah staged deployment atau deployment bertahap. Dengan menggunakan staged deployment, kita mencegah terjadinya bug fatal di production/live system.</p>

<p>Tantangan yang kita hadapi adalah, bagaimana cara mengelola konfigurasi aplikasi kita sehingga bisa dideploy di berbagai environment secara baik. Teknik bagaimana cara melakukan ini berbeda-beda, tergantung bahasa pemrograman, framework, dan library yang kita gunakan.</p>

<p>Pada artikel ini, kita akan membahas cara mengelola konfigurasi deployment menggunakan <a href="http://endy.artivisi.com/blog/java/development-stack-2011/">teknologi yang biasa digunakan di ArtiVisi</a>, yaitu<a href="http://www.springframework.org">Spring Framework</a> dan <a href="logback.qos.ch">Logback</a>.</p>

<h2>Alternatif Solusi</h2>

<p>Manajemen konfigurasi ini bisa kita lakukan dengan dua pendekatan, yaitu dikelola dengan <a href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html">Maven Profile</a>, atau dengan konfigurasi Spring Framework.</p>

<p>Jika kita menggunakan Maven Profile, kita menambahkan opsi pada saat melakukan build, kira-kira seperti ini :</p>

<p><div><script src='https://gist.github.com/1134126.js?file=maven-profile.sh'></script>
<noscript><pre><code>mvn -P production clean install</code></pre></noscript></div>
</p>

<p>atau</p>

<p><div><script src='https://gist.github.com/1134126.js?file=maven-env-var.sh'></script>
<noscript><pre><code>mvn -Denv=production clean install</code></pre></noscript></div>
</p>

<p>Dalam konfigurasi profile, kita bisa memilih file mana yang akan diinclude di dalam hasil build. Hasilnya, kita bisa menghasilkan artifact yang berbeda tergantung dari opsi yang kita berikan pada saat build.</p>

<p>Walaupun demikian, berdasarkan hasil Googling, ternyata <a href="http://java.dzone.com/articles/maven-profile-best-practices">metode ini tidak direkomendasikan</a>. Justru konfigurasi melalui Spring lebih disarankan.</p>

<p>Dengan menggunakan konfigurasi Spring, artifact yang dihasilkan oleh build hanya satu jenis saja. Artifact ini berisi semua pilihan konfigurasi. Konfigurasi mana yang akan aktif pada saat dijalankan (runtime) akan ditentukan oleh setting environment variable, bukan oleh artifactnya.</p>

<p>Selanjutnya, kita akan membahas metode manajemen konfigurasi menggunakan Spring.</p>

<h2>Konfigurasi Database</h2>

<p>Konfigurasi yang biasanya berbeda adalah informasi koneksi database. Untuk membedakan masing-masing environment, kita akan membuat tiga file, yaitu:</p>

<ul>
<li><p>jdbc.properties : digunakan di laptop programmer</p></li>
<li><p>jdbc.testing.properties : digunakan di server test</p></li>
<li><p>jdbc.production.properties : digunakan di live</p></li>
</ul>


<p>Berikut contoh isi jdbc.properties, yaitu konfigurasi koneksi database di laptop saya :
<div><script src='https://gist.github.com/1134126.js?file=jdbc.properties'></script>
<noscript><pre><code>hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost/kasbon?zeroDateTimeBehavior=convertToNull
jdbc.username = kasbon
jdbc.password = kasbon</code></pre></noscript></div>
</p>

<p>Kemudian, ini file jdbc.testing.properties :</p>

<p><div><script src='https://gist.github.com/1134126.js?file=jdbc.testing.properties'></script>
<noscript><pre><code>hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost/kasbon_testing?zeroDateTimeBehavior=convertToNull
jdbc.username = root
jdbc.password = admin</code></pre></noscript></div>
</p>

<p>Perhatikan bahwa informasi nama database, username, dan password databasenya berbeda dengan yang ada di konfigurasi laptop.</p>

<p>Terakhir, jdbc.production.properties</p>

<p><div><script src='https://gist.github.com/1134126.js?file=jdbc.production.properties'></script>
<noscript><pre><code>hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost/kasbon_live?zeroDateTimeBehavior=convertToNull
jdbc.username = root
jdbc.password = admin</code></pre></noscript></div>
</p>

<p>Ketiga file konfigurasi ini akan dibaca oleh konfigurasi Spring, yaitu di file applicationContext.xml. Isi lengkap dari file ini adalah sebagai berikut.</p>

<p><div><script src='https://gist.github.com/1134126.js?file=applicationContext.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
	xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;

	&lt;context:property-placeholder location=&quot;
	classpath*:jdbc.properties,
	classpath*:jdbc.${stage}.properties
	&quot; /&gt;

	&lt;tx:annotation-driven /&gt;

	&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;
		destroy-method=&quot;close&quot; p:driverClassName=&quot;${jdbc.driver}&quot; p:url=&quot;${jdbc.url}&quot;
		p:username=&quot;${jdbc.username}&quot; p:password=&quot;${jdbc.password}&quot; p:maxWait=&quot;40000&quot;
		p:maxActive=&quot;80&quot; p:maxIdle=&quot;20&quot; /&gt;

	&lt;bean id=&quot;transactionManager&quot;
		class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;
		p:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;


	&lt;bean id=&quot;sessionFactory&quot;
		class=&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;
		p:dataSource-ref=&quot;dataSource&quot; p:configLocations=&quot;classpath*:com/artivisi/**/hibernate.cfg.xml&quot;&gt;
		&lt;property name=&quot;hibernateProperties&quot;&gt;
			&lt;props&gt;
				&lt;prop key=&quot;hibernate.dialect&quot;&gt;${hibernate.dialect}&lt;/prop&gt;
			&lt;/props&gt;
		&lt;/property&gt;
	&lt;/bean&gt;

	&lt;bean id=&quot;messageSource&quot;
		class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;
		&lt;property name=&quot;basenames&quot;&gt;
			&lt;list&gt;
				&lt;value&gt;messages&lt;/value&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;

&lt;/beans&gt;</code></pre></noscript></div>
</p>

<p>Untuk lebih spesifik, konfigurasinya ada di baris berikut</p>

<p><div><script src='https://gist.github.com/1134126.js?file=context-loading.xml'></script>
<noscript><pre><code>&lt;context:property-placeholder location=&quot;
	classpath*:jdbc.properties, 
	classpath*:jdbc.${stage}.properties
&quot; /&gt;</code></pre></noscript></div>
</p>

<p>Di sana kita melihat ada variabel ${stage}.
Variabel ${stage} ini akan dicari dari <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-xml-import">beberapa tempat, diantaranya environment variabel yang bisa diset di JVM ataupun di sistem operasi</a>. Cara mengeset variabel ${stage} akan kita bahas sebentar lagi.</p>

<p>Di situ kita menyuruh Spring untuk membaca file jdbc.properties dan jdbc.${stage}.properties. Jika ada nilai variabel yang sama (misalnya jdbc.username), maka nilai variabel di file yang disebutkan belakangan akan menimpa nilai yang didefinisikan file di atasnya.</p>

<p>Contohnya, misalnya variabel ${stage} nilainya adalah testing. Maka Spring akan membaca file jdbc.properties dan jdbc.testing.properties. Karena kedua file memiliki variabel jdbc.url, maka isi jdbc.url di file jdbc.testing.properties akan menimpa nilai jdbc.url di jdbc.properties.</p>

<p>Bila variabel ${stage} tidak ada isinya, Spring akan mencari file yang namanya jdbc.${stage}.properties, dan tidak akan ketemu. Dengan demikian, nilai yang digunakan adalah yang ada di jdbc.properties.</p>

<p>Dengan demikian, behavior aplikasi adalah sebagai berikut</p>

<blockquote><p>Bila variabel stage diset production atau testing, maka yang digunakan adalah nilai konfigurasi di jdbc.production.properties atau jdbc.testing.properties. Bila tidak diset atau diset selain itu, maka yang digunakan adalah konfigurasi di jdbc.properties</p></blockquote>

<p>Behavior seperti inilah yang kita inginkan. Selanjutnya, tinggal kita isi nilai variabel stage.</p>

<h2>Setting Environment Variabel</h2>

<p>Variabel stage bisa diset dengan berbagai cara. Bila kita menggunakan <a href="http://tomcat.apache.org">Apache Tomcat</a>, maka kita mengedit file startup.sh atau startup.bat. Modifikasi baris yang berisi CATALINA_OPTS menjadi seperti ini :</p>

<p><div><script src='https://gist.github.com/1134126.js?file=startup.sh'></script>
<noscript><pre><code>export CATALINA_OPTS=&quot;-Dstage=production&quot;</code></pre></noscript></div>
</p>

<p>Atau, kita bisa jalankan dengan Jetty melalui Maven</p>

<p><div><script src='https://gist.github.com/1134126.js?file=mvn-jetty-run.sh'></script>
<noscript><pre><code>mvn jetty:run -Dstage=testing</code></pre></noscript></div>
</p>

<p>Bisa juga melalui environment variabel sistem operasi, di Linux kita set seperti ini.</p>

<p><div><script src='https://gist.github.com/1134126.js?file=linux-env-var.sh'></script>
<noscript><pre><code>EXPORT stage=production</code></pre></noscript></div>
</p>

<h2>Konfigurasi Logger</h2>

<p>Dengan menggunakan Spring seperti di atas, kita bisa membaca konfigurasi apa saja, misalnya</p>

<ul>
<li><p>Konfigurasi email : bila aplikasi kita mengirim/menerima email</p></li>
<li><p>Konfigurasi server lain : bila aplikasi kita berinteraksi dengan aplikasi orang lain, misalnya webservice atau koneksi socket</p></li>
<li><p>dsb</p></li>
</ul>


<p>Walaupun demikian, konfigurasi logger biasanya tidak diload oleh Spring, melainkan langsung dibaca oleh library loggernya.</p>

<p>Kita di ArtiVisi menggunakan SLF4J dan Logback. Cara konfigurasinya mirip dengan Spring. Kita punya satu master file yang akan membaca file lain sesuai isi variabel stage. Untuk itu kita siapkan beberapa file berikut:</p>

<ul>
<li><p>logback.xml : file konfigurasi utama</p></li>
<li><p>logback.production.xml : konfigurasi logger production, akan diinclude oleh logback.xml</p></li>
<li><p>logback.testing.xml : konfigurasi logger testing, akan diinclude oleh logback.xml</p></li>
<li><p>logback.development.xml : konfigurasi logger development, akan diinclude oleh logback.xml</p></li>
</ul>


<p>Berikut isi file logback.xml.</p>

<p><div><script src='https://gist.github.com/1134126.js?file=logback.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;

	&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
		&lt;encoder&gt;
			&lt;pattern&gt;%d %-5level %logger{35} - %msg %n&lt;/pattern&gt;
		&lt;/encoder&gt;
	&lt;/appender&gt;

	&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;
		&lt;file&gt;${catalina.home:-.}/logs/kasbon-${stage:-development}.log&lt;/file&gt;
		&lt;encoder&gt;
			&lt;pattern&gt;%d %-5level %logger{35} - %msg %n&lt;/pattern&gt;
		&lt;/encoder&gt;
	&lt;/appender&gt;

	&lt;include resource=&quot;logback-${stage:-development}.xml&quot;/&gt;

&lt;/configuration&gt;</code></pre></noscript></div>
</p>

<p>Seperti kita lihat, file ini berisi konfigurasi yang berlaku umum, seperti appender yang digunakan. Di file ini kita menulis variabel seperti ini</p>

<p><div><script src='https://gist.github.com/1134126.js?file=logback-variable.txt'></script>
<noscript><pre><code>${stage:-development}</code></pre></noscript></div>
</p>

<p>Yang artinya adalah, <a href="http://logback.qos.ch/manual/configuration.html">isi dengan variabel stage, kalau variabel tersebut tidak diset, defaultnya adalah development</a>. Ini sesuai dengan keinginan kita seperti pada waktu mengkonfigurasi Spring di atas.</p>

<p>Isi file logback-development.xml dan teman-temannya dapat dilihat <a href="https://github.com/artivisi/aplikasi-kasbon/tree/master/aplikasi-kasbon-config/src/main/resources">di Github</a>.</p>

<p>Demikianlah tutorial cara mengelola konfigurasi untuk keperluan staged deployment. Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Transaction]]></title>
    <link href="http://software.endy.muhardin.com/java/database-transaction/"/>
    <updated>2011-02-14T04:14:22+07:00</updated>
    <id>http://software.endy.muhardin.com/java/database-transaction</id>
    <content type="html"><![CDATA[<p>Artikel ini saya tulis berdasarkan diskusi tentang transaction di milis id-mysql. Awalnya sederhana, ada yang tanya begini,</p>

<blockquote><p>halo rekan2 dba &amp; developer</p>

<p>mysql-innodb kan punya fasilitas transaction yang seperti oracle/postgres tuh.
mau nanya, dalam implementasi real di aplikasi,
contoh bussiness process/use case apa aja yang menggunakan transaction?
kemudian contoh kasus rollbacknya gimana?</p></blockquote>

<p>Tadinya saya kurang semangat menjawab, karena asumsi saya, ini pertanyaan mendasar, dan pastilah banyak yang bisa menjawab secara benar dan tidak menyesatkan. Tapi apa lacur, saya membaca pertanyaan lanjutan seperti ini.</p>

<blockquote><p>Ada yang pernah punya pengalaman pake software accounting tanpa feature
transaction?</p></blockquote>

<p>Dan jawabannya ternyata sangat mengerikan.</p>

<blockquote><p>yup, pernah.. 3 aplikasi sudah berjalan berbeda2 kasus accounting nya..
dan tidak menggunakan feature transaction...
skrng sedang garap accounting lainnya untuk perusahan dagang, dan
sudah direncakan tanpa feature transaction.</p>

<p>yg aplikasi 1 dr taun 2002, aplikasi 2 dr taun 2004, aplikasi 3 dr jan 2010.
oya, ada jg aplikasi lain di sekitar taun 2005-2009, beberapa masih
dipakai, beberapa tdk dipakai karena masalah internal mereka.
dan selama ini aplikasi yg telah dipakai masih ok2 saja pak.</p>

<p>menurut singkat saya, jika peng-handle php nya sudah cukup
menanggulangi masalah transaksi data, tidak harus menggunakan feature
transaction pada database nya.
karena pd umumnya yg sudah berjalan, kebutuhan inti ada pada
pencarian, input, edit, delete dengan kecepatan yg tinggi dan diakses
oleh beberapa user, dan juga optimize database, dengan begitu menurut
hemat saya, saya lebih condong menggunakan MyIsam yg tdk menggunakan
feature transaction yg sedikit memberatkan proses data.</p>

<p>oya, untuk case mengharuskan memakai feature transaction itu misalnya
pada kasus:
jika pada aplikasi tidak meng-handle apabila ada data transaksi yg
dihapus/update/input yg mengharuskan ada link data yg juga ikut
terupdate/terhapus/terinput</p>

<p>untuk yg sudah menggunakan feature transaction, silahkan saya juga
menunggu tanggapan dan pengalamannya.</p></blockquote>

<p>What the @#$!
Ini kalo meminjam istilah MUI, harus dibimbing untuk kembali ke jalan yang benar, tapi tidak boleh anarkis :D</p>

<p>Salah satu poin penting dalam database transaction adalah atomic, yaitu beberapa perintah dianggap sebagai satu kesatuan.
Kalau satu gagal, yang lain harus dibatalkan.</p>

<p>Ini adalah fundamental dari pemrograman dengan menggunakan database relasional.</p>

<p>Pada kasus apa perlu transaction?
Ya pada semua kasus yang perlu atomic.
Contohnya : header detail. Sekali insert, 1 header dan beberapa detail.
Kalo pada waktu insert detail gagal, ya headernya harus diundo, kalo ngga ada header yang gantung tanpa detail sehingga datanya juga jadi salah.</p>

<p>Sekarang balik saya tanya, aplikasi apa yang gak pake skema header detail?
Kecuali aplikasi prakarya tugas sekolah, aplikasi bisnis <strong>pasti</strong> pake header detail.</p>

<p>Itu masalah atomicity. Kemudian ada masalah isolation.
Isolation ini artinya, transaction yang belum dicommit, tidak akan bisa dibaca oleh session lain.
Contohnya gini, kita terima order 1000 item.
Tentunya butuh waktu untuk menginsert 1000 record, misalnya butuh waktu 2 detik.
Di dunia prosesor, 2 detik itu lama sekali, dan banyak hal bisa terjadi dalam rentang waktu tersebut.
Nah, akan terjadi musibah, kalo kita ternyata ada fitur untuk menghitung jumlah order, katakan saja querynya seperti ini.</p>

<pre><code>select sum(nilai) from t_order where tanggal = '2011-02-02'
</code></pre>

<p>yang berjalan di tengah-tengah proses insert tadi, misalnya pada waktu baru terinsert 53 order saja. Query hitung ini dijalankan oleh user lain. Suatu hal yang sangat umum terjadi, aplikasi diakses beberapa user berbarengan.</p>

<p>Query ini akan menghasilkan nilai yang salah, karena 1000 order itu belum tentu sukses diinsert.
Misalnya pada record ke 143 terjadi mati lampu, hardisk penuh, komputer hang, browser ketutup, laptop kesiram kopi, usernya menekan tombol cancel, validasi stok produk tidak cukup, atau whatever kejadian remeh-temeh yang umum terjadi dalam kehidupan sehari-hari, tentu akan terjadi kekacauan.
Karena tidak atomic, maka kita tidak tau sudah berapa record yang terinsert, sehingga menyulitkan proses recovery. Order mana yang harus diinsert ulang, dan order mana yang sudah masuk?
Karena tidak ada isolation, maka user yang menjalankan perhitungan order akan mendapat hasil yang tidak sahih kebenarannya.</p>

<p>Seandainya saja kita menggunakan transaction dengan benar, maka pada waktu terjadi sesuatu pada waktu proses insert tadi, maka posisi database akan dikembalikan ke posisi sebelum insert dilakukan. Karena posisi sebelum insert kita tahu dengan pasti, maka recovery gampang.
Insert ulang saja 1000 order tadi tanpa kecuali. Sederhana dan mudah.</p>

<p>Jadi kalo ada di sini yang bilang bikin aplikasi bisnis tanpa transaction, maka itu adalah nonsense.
Tidak peduli kalo sampe saat ini jalan lancar, maka itu hanyalah kebetulan belaka, dan kita tidak mau selamanya mengandalkan keberuntungan kan?
Kalau sampai saat ini berjalan lancar, ya mungkin aplikasinya cuma dipakai 1 concurrent user saja dan itupun jarang-jarang pake.</p>

<p>Nah, jadi transaction itu adalah fitur fundamental yang harus digunakan, sama seperti kalo kita keluar rumah ya harus pake celana.
Di daerah lain sana orang kemana2 cuma pake koteka, dan saya tidak mau berdebat dengan mereka urusan celana.
Jadi kalo masih ada yang bersikukuh bikin aplikasi bisnis gak pake transaction, ya silahkan, saya tidak mau berdebat urusan ini.
Percuma berdebat sama orang yang gak pake celana ;p</p>

<p>Selanjutnya, sebetulnya apa benar transaction itu memberatkan aplikasi?
Hmm ... ini sebetulnya hanyalah mitos belaka.
Yang mau mendebat silahkan sajikan benchmark antara non-transactional dan transactional.
Kalo selisih performance cuma 100%, artinya kalo non-transactional cuma 2 kali lebih lemot, saya mendingan upgrade hardware daripada mengorbankan data integrity untuk gain performance yang tidak seberapa ini.</p>

<p>Jadi, apa kita tidak boleh pakai MyISAM ?
Tentu ada waktu dan tempatnya.
Data2 read only seperti misalnya tabel kategori, master produk, bolehlah pake MyISAM.
Tapi kalo sudah data header detail, ya harus InnoDB dan harus menggunakan transaction supaya atomic.</p>

<p>Setelah kita menggunakan InnoDB, sebetulnya kita tidak bisa non-transactional.
Kalo kita tidak begin dan commit secara explisit, sebenarnya untuk tiap SQL statement, itu dianggap satu transaction.
Sehingga SQL seperti ini :</p>

<pre><code>update table harga set nilai = nilai + 1000;
</code></pre>

<p>Sebetulnya akan dijalankan seperti ini ;</p>

<pre><code>begin;
update table harga set nilai = nilai + 1000;
commit;
</code></pre>

<p>Ini namanya fitur autocommit. Di MySQL defaultnya dienable.</p>

<p>Dengan adanya autocommit ini, justru kita akan lebih lemot kalo tidak menggunakan transaction secara benar.
Contoh, insert 100 data produk.
Kalo tanpa begin dan commit explisit, berarti ada 100 begin dan ada 100 commit, artinya 100 kali menjalankan transaction.
Akan lebih efisien kalo kita lakukan explisit, seperti ini :</p>

<pre><code>begin; 
insert into table produk (kode) values ('P-001');
... ulangi 99 kali lagi ..
commit; 
</code></pre>

<p>Cara di atas hanya akan membutuhkan satu transaction saja.
Jauh lebih efisien.</p>

<p>Baiklah, ada beberapa pesan moral di artikel ini</p>

<ol>
<li><p>Header detail harus dioperasikan secara atomic</p></li>
<li><p>Operasi yang belum selesai, tidak boleh dilihat session lain, sehingga untuk aplikasi multiuser, pasti butuh isolation</p></li>
<li><p>Karena aplikasi bisnis umumnya multiuser, dan pasti punya skema header-detail, maka <strong>pasti harus</strong>menggunakan transaction</p></li>
<li><p>Masalah performance di transaction umumnya mitos belaka, dan walaupun ada, tidak sebanding dengan mengabaikan integritas data</p></li>
<li><p>Jangan lupa pakai celana kalau keluar rumah</p></li>
</ol>


<p>Pembaca setia blog saya tentu paham bahwa biasanya saya memberikan anjuran dengan kata-kata sebaiknya, tergantung situasi, dan istilah-istilah yang relatif. Tapi di artikel ini, banyak kata-kata pasti, harus, dan sejenisnya. Ini karena masalah transaction ini berkaitan dengan integritas data. Aplikasi yang kita buat haruslah bisa dipercaya untuk menghasilkan perhitungan yang benar. Tanpa menjaga integritas data dengan transaction, mustahil perhitungan yang benar bisa didapatkan.</p>

<p>Lebih lanjut tentang masalah-masalah yang bisa terjadi, bisa lihat <a href="http://en.wikipedia.org/wiki/Database_transaction">di Wikipedia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Setup dengan Gradle]]></title>
    <link href="http://software.endy.muhardin.com/java/project-setup-dengan-gradle/"/>
    <updated>2011-02-01T20:21:35+07:00</updated>
    <id>http://software.endy.muhardin.com/java/project-setup-dengan-gradle</id>
    <content type="html"><![CDATA[<p>Project Setup dengan menggunakan Gradle dan Git</p>

<p>Hal pertama yang kita lakukan sebelum mulai bekerja tentunya adalah menyiapkan meja kerja dan peralatannya. Sama juga dengan mulai membuat aplikasi. Kita harus menyiapkan struktur folder, library dan framework, dan mengatur semuanya agar siap dikerjakan di meja kita, dalam hal ini IDE.</p>

<p>Di ArtiVisi, biasanya ini dikerjakan oleh programmer senior, yaitu <a href="http://martinusadyh.web.id/">Martinus</a> atau saya sendiri. Kegiatan project setup ini tidak terlalu tinggi frekuensinya, karena biasanya coding project yang existing jauh lebih sering daripada memulai project baru.</p>

<p>Yang jarang dikerjakan biasanya cepat dilupakan. Inilah alasan utama saya menulis posting kali ini, sebagai pengingat buat diri sendiri. Selain itu, mudah-mudahan ada manfaatnya juga untuk para pembaca sekalian.</p>

<p>Sebagai gambaran, tipikal aplikasi di ArtiVisi menggunakan <a href="http://endy.artivisi.com/blog/java/development-stack-2011/">stack standar 2011</a>. Jadi, project setup ini akan dibuat mengikuti stack standar tersebut.</p>

<p>Pertama kali, kita buat dulu projectnya. Satu aplikasi biasanya kita pecah menjadi beberapa komponen, yaitu :</p>

<ul>
<li><p>Domain Model dan Service API : ini kita pisahkan untuk memudahkan distribusi ke aplikasi client. Perhatikan bahwa yang saya maksud client di sini bukanlah customer pembeli aplikasi, melainkan aplikasi di sisi hilir misalnya user interface yang dibuat dengan Swing. Di sisi client, tidak perlu ada detail implementasi. Cukup class-class domain seperti Produk, Kategori, dsb. Juga kita sediakan service interface, yaitu method yang bisa digunakan untuk menjalankan proses bisnis.</p></li>
<li><p>Implementasi Service : ini adalah implementasi dari service interface di atas. Implementasi biasanya hanya ada di sisi server. Jadi, jar yang dihasilkan project ini tidak kita distribusikan ke client</p></li>
<li><p>Konfigurasi : file konfigurasi seperti jdbc.properties, logback-test.xml, smtp.properties, dan setting-setting lain kita juga pisahkan ke project sendiri. Ini tujuannya untuk memudahkan deployment. Seperti kita tahu, biasanya ada beberapa environment seperti development di laptop programmer, testing server, dan production server. Dengan memisahkan konfigurasi, kita bisa menghindari mendeploy konfigurasi development ke server production. Yang perlu diperhatikan di sini, hibernate.cfg.xml dan applicationContext.xml bukanlah file konfigurasi. Itu adalah file aplikasi, walaupun bentuknya xml dan tidak perlu dikompilasi.</p></li>
<li><p>User Interface : kalau aplikasi desktop, ini hanya satu project saja. Atau mungkin dua dengan konfigurasinya. Tapi untuk web, biasanya kita pecah dua juga. Yang satu berisi source code java, satu lagi berisi aplikasi web. Dengan demikian, bila ada perubahan di controller, kita cukup deploy 1 jar, tidak perlu upload 1 war.</p></li>
</ul>


<p>Sebagai ketentuan lain, biasanya nama package selalu kita awali dengan com.artivisi, dan struktur folder mengikuti standar Maven.</p>

<p>Mari kita mulai, berikut rangkaian perintah di linux untuk membuat struktur awal project.</p>

<p><div><script src='https://gist.github.com/794650.js?file=folder-structure.sh'></script>
<noscript><pre><code>mkdir -p project-contoh/com.artivisi.contoh.{config,domain,service.impl,ui.springmvc,ui.web}/src/{main,test}/{java,resources}
mkdir -p project-contoh/com.artivisi.contoh.ui.web/src/main/webapp/WEB-INF</code></pre></noscript></div>
</p>

<p>Outputnya bisa kita lihat sebagai berikut</p>

<pre><code>find . 
.
./com.artivisi.contoh.service.impl
./com.artivisi.contoh.service.impl/src
./com.artivisi.contoh.service.impl/src/test
./com.artivisi.contoh.service.impl/src/test/java
./com.artivisi.contoh.service.impl/src/test/resources
./com.artivisi.contoh.service.impl/src/main
./com.artivisi.contoh.service.impl/src/main/java
./com.artivisi.contoh.service.impl/src/main/resources
./com.artivisi.contoh.domain
./com.artivisi.contoh.domain/src
./com.artivisi.contoh.domain/src/test
./com.artivisi.contoh.domain/src/test/java
./com.artivisi.contoh.domain/src/test/resources
./com.artivisi.contoh.domain/src/main
./com.artivisi.contoh.domain/src/main/java
./com.artivisi.contoh.domain/src/main/resources
./com.artivisi.contoh.ui.springmvc
./com.artivisi.contoh.ui.springmvc/src
./com.artivisi.contoh.ui.springmvc/src/test
./com.artivisi.contoh.ui.springmvc/src/test/java
./com.artivisi.contoh.ui.springmvc/src/test/resources
./com.artivisi.contoh.ui.springmvc/src/main
./com.artivisi.contoh.ui.springmvc/src/main/java
./com.artivisi.contoh.ui.springmvc/src/main/resources
./com.artivisi.contoh.config
./com.artivisi.contoh.config/src
./com.artivisi.contoh.config/src/test
./com.artivisi.contoh.config/src/test/java
./com.artivisi.contoh.config/src/test/resources
./com.artivisi.contoh.config/src/main
./com.artivisi.contoh.config/src/main/java
./com.artivisi.contoh.config/src/main/resources
./com.artivisi.contoh.ui.web
./com.artivisi.contoh.ui.web/src
./com.artivisi.contoh.ui.web/src/test
./com.artivisi.contoh.ui.web/src/test/java
./com.artivisi.contoh.ui.web/src/test/resources
./com.artivisi.contoh.ui.web/src/main
./com.artivisi.contoh.ui.web/src/main/java
./com.artivisi.contoh.ui.web/src/main/webapp/WEB-INF
./com.artivisi.contoh.ui.web/src/main/resources
</code></pre>

<p>Berikutnya, kita lengkapi dengan dependensi jar. Di ArtiVisi, kita menggunakan Gradle.
Gradle meminta kita untuk mendaftarkan project yang terlibat dalam settings.gradle</p>

<p><div><script src='https://gist.github.com/794650.js?file=settings.gradle'></script>
<noscript><pre><code>include &quot;com.artivisi.contoh.config&quot;
include &quot;com.artivisi.contoh.domain&quot;
include &quot;com.artivisi.contoh.service.impl&quot;
include &quot;com.artivisi.contoh.ui.springmvc&quot;
include &quot;com.artivisi.contoh.ui.web&quot;</code></pre></noscript></div>
</p>

<p>Dan ini build file Gradle.</p>

<p><div><script src='https://gist.github.com/794650.js?file=build.gradle'></script>
<noscript><pre><code>springVersion = &quot;3.0.5.RELEASE&quot;
springSecurityVersion = &quot;3.0.5.RELEASE&quot;
slf4jVersion = &quot;1.6.1&quot;
logbackVersion = &quot;0.9.27&quot;
jodaTimeVersion = &quot;1.6.2&quot;
sourceCompatibility = 1.6
 
subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
 
    configurations {
        all*.exclude group: &quot;commons-logging&quot;, module: &quot;commons-logging&quot;
    }
 
    repositories {
        mavenCentral()
    }
 
    dependencies {
        compile &quot;org.slf4j:jcl-over-slf4j:$slf4jVersion&quot;,
                &quot;org.slf4j:jul-to-slf4j:$slf4jVersion&quot;
                
        runtime &quot;joda-time:joda-time:$jodaTimeVersion&quot;        
                
        runtime &quot;ch.qos.logback:logback-classic:$logbackVersion&quot;
  
        testCompile 'junit:junit:4.7'
    }
 
    group = 'com.artivisi.contoh'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = 1.6
    
    task wrapper(type: Wrapper) {
        gradleVersion = '0.9.1'
        jarFile = 'wrapper/wrapper.jar'
    }
}

project('com.artivisi.contoh.domain') {
    dependencies { 
        compile &quot;org.hibernate:hibernate-entitymanager:3.4.0.GA&quot;
     
        compile &quot;org.springframework:spring-tx:$springVersion&quot;,
                &quot;org.springframework:spring-orm:$springVersion&quot;,
                &quot;org.springframework:spring-jdbc:$springVersion&quot;
                
     
    }
}

project('com.artivisi.contoh.service.impl') {
    dependencies { 
        compile project(':com.artivisi.contoh.domain')
        compile &quot;org.hibernate:hibernate-entitymanager:3.4.0.GA&quot;
     
        compile &quot;org.springframework:spring-tx:$springVersion&quot;,
                &quot;org.springframework:spring-orm:$springVersion&quot;,
                &quot;org.springframework:spring-jdbc:$springVersion&quot;
                
     
    }
}

project('com.artivisi.contoh.ui.springmvc') {
    dependencies {
        compile project(':com.artivisi.contoh.service.impl')
     
        compile &quot;org.springframework:spring-webmvc:$springVersion&quot;,
                &quot;org.springframework:spring-aop:$springVersion&quot;
     
        compile &quot;org.springframework.security:spring-security-web:$springSecurityVersion&quot;,
                &quot;org.springframework.security:spring-security-config:$springSecurityVersion&quot;
     
        compile &quot;javax.validation:validation-api:1.0.0.GA&quot;,
                &quot;org.hibernate:hibernate-validator:4.0.2.GA&quot;
     
    }
}

project('com.artivisi.contoh.ui.web') {
    apply plugin: 'war'
    apply plugin: 'jetty'
     
    dependencies {
        compile project(':com.artivisi.contoh.ui.springmvc')
        runtime project(':com.artivisi.contoh.config')
      
        runtime &quot;javax.servlet:jstl:1.1.2&quot;,
                &quot;taglibs:standard:1.1.2&quot;,
                &quot;opensymphony:sitemesh:2.4.2&quot;
     
        providedCompile &quot;javax.servlet:servlet-api:2.5&quot;
    }
}</code></pre></noscript></div>
</p>

<p>Build file ini sudah mendeskripsikan semua sub-projectnya. Sebetulnya kita bisa membuat buildfile di masing-masing project, tapi saya lebih suka terpusat seperti ini supaya terlihat keterkaitan antar project.</p>

<p>Karena saya menggunakan Eclipse, saya menambahkan metadata supaya projectnya bisa dibuka di Eclipse. Ini bisa kita lakukan dengan cara menjalankan perintah</p>

<pre><code>gradle eclipse
</code></pre>

<p>dalam masing-masing folder project. Tapi karena terlalu malas, saya gunakan satu baris perintah ini.</p>

<p><div><script src='https://gist.github.com/794650.js?file=export-eclipse.sh'></script>
<noscript><pre><code>for d in */; do cd &quot;$d&quot;; gradle eclipse; cd ..; done</code></pre></noscript></div>
</p>

<p>Untung saja pakai linux, jadi bisa coding di command prompt :D</p>

<p>Selanjutnya, kita bisa test dengan melakukan build di project paling hilir, yaitu ui.web</p>

<pre><code>cd com.artivisi.contoh.ui.web
gradle war
</code></pre>

<p>Hasilnya ada di folder build/libs
Kita cek apakah semua dependensi sudah terpenuhi dengan perintah berikut.</p>

<pre><code>jar tvf build/libs/com.artivisi.contoh.ui.web-1.0-SNAPSHOT.war
</code></pre>

<p>Ini juga bisa langsung dijalankan dengan plugin Jetty yang ada dalam Gradle.</p>

<pre><code>cd com.artivisi.contoh.ui.web
gradle jetty
</code></pre>

<p>Outputnya bisa kita lihat di browser, dengan port 8080.
<img src="/images/uploads/2011/01/jetty-run-300x216.png" title="" ></p>

<p>Di situ ada link menuju aplikasi kita. Silahkan diklik.
<img src="/images/uploads/2011/01/klik-context-path-300x214.png" title="" ></p>

<p>Folder WEB-INF masih terlihat, karena kita belum membuat web.xml. Berikut isi web.xml, masukkan dalam folder com.artivisi.contoh.ui.web/src/main/webapp/WEB-INF</p>

<p><div><script src='https://gist.github.com/794650.js?file=web.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app version=&quot;2.5&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;

	&lt;!-- Reads request input using UTF-8 encoding --&gt;
	&lt;filter&gt;
		&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;
		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
		&lt;init-param&gt;
			&lt;param-name&gt;encoding&lt;/param-name&gt;
			&lt;param-value&gt;UTF-8&lt;/param-value&gt;
		&lt;/init-param&gt;
		&lt;init-param&gt;
			&lt;param-name&gt;forceEncoding&lt;/param-name&gt;
			&lt;param-value&gt;true&lt;/param-value&gt;
		&lt;/init-param&gt;
	&lt;/filter&gt;

	&lt;filter-mapping&gt;
		&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;
		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
	&lt;/filter-mapping&gt;
	
	&lt;!-- Handles all requests into the application --&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
		&lt;init-param&gt;
			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
			&lt;param-value&gt;
				/WEB-INF/springmvc-context.xml
			&lt;/param-value&gt;
		&lt;/init-param&gt;
		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
	&lt;/servlet&gt;

	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;

&lt;/web-app&gt;</code></pre></noscript></div>
</p>

<p>Sekalian saja kita konfigurasi Spring MVC. Pasang file springmvc-context.xml ini di sebelahnya web.xml</p>

<p><div><script src='https://gist.github.com/794650.js?file=springmvc-context.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;

	&lt;!-- Scans the classpath of this application for @Components to deploy as beans --&gt;
	&lt;context:component-scan base-package=&quot;com.artivisi.contoh.ui.web&quot; /&gt;

	&lt;!-- Configures the @Controller programming model --&gt;
	&lt;mvc:annotation-driven /&gt;
	
	&lt;!-- mengganti default servletnya Tomcat dan Jetty --&gt;
	&lt;!-- ini diperlukan kalau kita mapping DispatcherServlet ke / --&gt;
	&lt;!-- sehingga tetap bisa mengakses folder selain WEB-INF, misalnya img, css, js --&gt;
	&lt;mvc:default-servlet-handler/&gt;

	&lt;!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory --&gt;
	&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;/resources/&quot; /&gt;

	&lt;!-- Application Message Bundle --&gt;
	&lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;
		&lt;property name=&quot;basename&quot; value=&quot;/WEB-INF/messages/messages&quot; /&gt;
		&lt;property name=&quot;cacheSeconds&quot; value=&quot;0&quot; /&gt;
	&lt;/bean&gt;

	&lt;!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory --&gt;
	&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
		&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/templates/jsp/&quot;/&gt;
		&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
	&lt;/bean&gt;
	
	&lt;!-- Forwards requests to the &quot;/&quot; resource to the &quot;hello&quot; view --&gt;
	&lt;mvc:view-controller path=&quot;/&quot; view-name=&quot;hello&quot;/&gt;

&lt;/beans&gt;
</code></pre></noscript></div>
</p>

<p>Kita cek juga apakah projectnya sudah bisa dibuka di Eclipse. Mari kita import.</p>

<p>Pertama, arahkan workspace ke folder project-contoh.
<img src="/images/uploads/2011/01/01-pilih-workspace-300x154.png" title="" ></p>

<p>Setelah Eclipse terbuka, kita pilih menu Import Project, untuk membuka 4 project yang tadi sudah kita buat.
<img src="/images/uploads/2011/01/02-import-existing-300x272.png" title="" ></p>

<p>Pilih folder induknya.
<img src="/images/uploads/2011/01/03-select-root-directory-272x300.png" title="" ></p>

<p>Selesai, semua project kita bisa dibuka. Bahkan kita bisa menjalankan project ui.web dengan cara klik kanan Run in Server. Ini bisa dilihat dari icon project tersebut yang berbentuk bola dunia.</p>

<p><img src="/images/uploads/2011/01/04-import-result-300x139.png" title="" ></p>

<p>Selesai sudah, mari kita <a href="http://endy.artivisi.com/blog/aplikasi/sharing-repository-git/">share dengan rekan yang lain</a>.</p>
]]></content>
  </entry>
  
</feed>
